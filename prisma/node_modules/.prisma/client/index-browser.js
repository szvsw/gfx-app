
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.7.0
 * Query Engine version: 8746e055198f517658c08a0c426c7eec87f5a85f
 */
Prisma.prismaVersion = {
  client: "3.7.0",
  engine: "8746e055198f517658c08a0c426c7eec87f5a85f"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  email: 'email',
  role: 'role'
});

exports.Prisma.ReactorPairScalarFieldEnum = makeEnum({
  id: 'id',
  frontId: 'frontId',
  backId: 'backId'
});

exports.Prisma.ReactorScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  mass: 'mass',
  radHard: 'radHard',
  spectralClass: 'spectralClass',
  techs: 'techs',
  thrustModifier: 'thrustModifier',
  fuelModifier: 'fuelModifier',
  abilities: 'abilities',
  coolingReq: 'coolingReq',
  generatorReq: 'generatorReq',
  ReactorReq: 'ReactorReq'
});

exports.Prisma.GeneratorPairScalarFieldEnum = makeEnum({
  id: 'id',
  frontId: 'frontId',
  backId: 'backId'
});

exports.Prisma.GeneratorScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  mass: 'mass',
  radHard: 'radHard',
  spectralClass: 'spectralClass',
  techs: 'techs',
  thrustModifier: 'thrustModifier',
  fuelModifier: 'fuelModifier',
  abilities: 'abilities',
  coolingReq: 'coolingReq',
  generatorReq: 'generatorReq',
  ReactorReq: 'ReactorReq'
});

exports.Prisma.ThrusterPairScalarFieldEnum = makeEnum({
  id: 'id',
  frontId: 'frontId',
  backId: 'backId'
});

exports.Prisma.ThrusterScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  mass: 'mass',
  radHard: 'radHard',
  spectralClass: 'spectralClass',
  fuelType: 'fuelType',
  thrust: 'thrust',
  fuelConsumption: 'fuelConsumption',
  afterBurn: 'afterBurn',
  powersatBonus: 'powersatBonus',
  abilities: 'abilities',
  coolingReq: 'coolingReq',
  generatorReq: 'generatorReq',
  ReactorReq: 'ReactorReq'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.Role = makeEnum({
  USER: 'USER',
  ADMIN: 'ADMIN'
});

exports.SpectralClass = makeEnum({
  C: 'C',
  V: 'V',
  S: 'S',
  H: 'H',
  D: 'D',
  M: 'M'
});

exports.GeneratorTech = makeEnum({
  ELECTRIC: 'ELECTRIC',
  PULSED: 'PULSED'
});

exports.ReactorTech = makeEnum({
  NEUTRONIC: 'NEUTRONIC',
  BURSTPLASMA: 'BURSTPLASMA',
  EXOTIC: 'EXOTIC'
});

exports.Abilities = makeEnum({
  AEROBRAKE: 'AEROBRAKE',
  SOLAR: 'SOLAR',
  AIREATER: 'AIREATER',
  PIVOT: 'PIVOT',
  FLARE: 'FLARE',
  POWERSAT: 'POWERSAT',
  NOBERNAL: 'NOBERNAL',
  NOINDUSTRIALIZE: 'NOINDUSTRIALIZE',
  VALKYRIE: 'VALKYRIE',
  SCOOP: 'SCOOP'
});

exports.FuelType = makeEnum({
  DIRT: 'DIRT',
  WATER: 'WATER',
  ISOTOPE: 'ISOTOPE'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  ReactorPair: 'ReactorPair',
  Reactor: 'Reactor',
  GeneratorPair: 'GeneratorPair',
  Generator: 'Generator',
  ThrusterPair: 'ThrusterPair',
  Thruster: 'Thruster'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)

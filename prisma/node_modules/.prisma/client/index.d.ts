
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: string
  createdAt: Date
  updatedAt: Date
  email: string
  role: Role
}

/**
 * Model ReactorPair
 * 
 */
export type ReactorPair = {
  id: number
  frontId: number
  backId: number
}

/**
 * Model Reactor
 * 
 */
export type Reactor = {
  id: number
  name: string
  mass: number
  radHard: number
  spectralClass: SpectralClass
  techs: GeneratorTech[]
  thrustModifier: number
  fuelModifier: number
  abilities: Abilities[]
  coolingReq: number
  generatorReq: GeneratorTech
  ReactorReq: ReactorTech
}

/**
 * Model GeneratorPair
 * 
 */
export type GeneratorPair = {
  id: number
  frontId: number
  backId: number
}

/**
 * Model Generator
 * 
 */
export type Generator = {
  id: number
  name: string
  mass: number
  radHard: number
  spectralClass: SpectralClass
  techs: GeneratorTech[]
  thrustModifier: number
  fuelModifier: number
  abilities: Abilities[]
  coolingReq: number
  generatorReq: GeneratorTech[]
  ReactorReq: ReactorTech[]
}

/**
 * Model ThrusterPair
 * 
 */
export type ThrusterPair = {
  id: number
  frontId: number
  backId: number
}

/**
 * Model Thruster
 * 
 */
export type Thruster = {
  id: number
  name: string
  mass: number
  radHard: number
  spectralClass: SpectralClass
  fuelType: FuelType
  thrust: number
  fuelConsumption: number
  afterBurn: number
  powersatBonus: number | null
  abilities: Abilities[]
  coolingReq: number
  generatorReq: GeneratorTech[]
  ReactorReq: ReactorTech[]
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const Role: {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const SpectralClass: {
  C: 'C',
  V: 'V',
  S: 'S',
  H: 'H',
  D: 'D',
  M: 'M'
};

export type SpectralClass = (typeof SpectralClass)[keyof typeof SpectralClass]


export const GeneratorTech: {
  ELECTRIC: 'ELECTRIC',
  PULSED: 'PULSED'
};

export type GeneratorTech = (typeof GeneratorTech)[keyof typeof GeneratorTech]


export const ReactorTech: {
  NEUTRONIC: 'NEUTRONIC',
  BURSTPLASMA: 'BURSTPLASMA',
  EXOTIC: 'EXOTIC'
};

export type ReactorTech = (typeof ReactorTech)[keyof typeof ReactorTech]


export const Abilities: {
  AEROBRAKE: 'AEROBRAKE',
  SOLAR: 'SOLAR',
  AIREATER: 'AIREATER',
  PIVOT: 'PIVOT',
  FLARE: 'FLARE',
  POWERSAT: 'POWERSAT',
  NOBERNAL: 'NOBERNAL',
  NOINDUSTRIALIZE: 'NOINDUSTRIALIZE',
  VALKYRIE: 'VALKYRIE',
  SCOOP: 'SCOOP'
};

export type Abilities = (typeof Abilities)[keyof typeof Abilities]


export const FuelType: {
  DIRT: 'DIRT',
  WATER: 'WATER',
  ISOTOPE: 'ISOTOPE'
};

export type FuelType = (typeof FuelType)[keyof typeof FuelType]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;


      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.reactorPair`: Exposes CRUD operations for the **ReactorPair** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReactorPairs
    * const reactorPairs = await prisma.reactorPair.findMany()
    * ```
    */
  get reactorPair(): Prisma.ReactorPairDelegate<GlobalReject>;

  /**
   * `prisma.reactor`: Exposes CRUD operations for the **Reactor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reactors
    * const reactors = await prisma.reactor.findMany()
    * ```
    */
  get reactor(): Prisma.ReactorDelegate<GlobalReject>;

  /**
   * `prisma.generatorPair`: Exposes CRUD operations for the **GeneratorPair** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GeneratorPairs
    * const generatorPairs = await prisma.generatorPair.findMany()
    * ```
    */
  get generatorPair(): Prisma.GeneratorPairDelegate<GlobalReject>;

  /**
   * `prisma.generator`: Exposes CRUD operations for the **Generator** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Generators
    * const generators = await prisma.generator.findMany()
    * ```
    */
  get generator(): Prisma.GeneratorDelegate<GlobalReject>;

  /**
   * `prisma.thrusterPair`: Exposes CRUD operations for the **ThrusterPair** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ThrusterPairs
    * const thrusterPairs = await prisma.thrusterPair.findMany()
    * ```
    */
  get thrusterPair(): Prisma.ThrusterPairDelegate<GlobalReject>;

  /**
   * `prisma.thruster`: Exposes CRUD operations for the **Thruster** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Thrusters
    * const thrusters = await prisma.thruster.findMany()
    * ```
    */
  get thruster(): Prisma.ThrusterDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.7.0
   * Query Engine version: 8746e055198f517658c08a0c426c7eec87f5a85f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    ReactorPair: 'ReactorPair',
    Reactor: 'Reactor',
    GeneratorPair: 'GeneratorPair',
    Generator: 'Generator',
    ThrusterPair: 'ThrusterPair',
    Thruster: 'Thruster'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    email: string | null
    role: Role | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    email: string | null
    role: Role | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    email: number
    role: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    email: string
    role: Role
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Promise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean
    role?: boolean
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
     never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
  }



  /**
   * Model ReactorPair
   */


  export type AggregateReactorPair = {
    _count: ReactorPairCountAggregateOutputType | null
    _avg: ReactorPairAvgAggregateOutputType | null
    _sum: ReactorPairSumAggregateOutputType | null
    _min: ReactorPairMinAggregateOutputType | null
    _max: ReactorPairMaxAggregateOutputType | null
  }

  export type ReactorPairAvgAggregateOutputType = {
    id: number | null
    frontId: number | null
    backId: number | null
  }

  export type ReactorPairSumAggregateOutputType = {
    id: number | null
    frontId: number | null
    backId: number | null
  }

  export type ReactorPairMinAggregateOutputType = {
    id: number | null
    frontId: number | null
    backId: number | null
  }

  export type ReactorPairMaxAggregateOutputType = {
    id: number | null
    frontId: number | null
    backId: number | null
  }

  export type ReactorPairCountAggregateOutputType = {
    id: number
    frontId: number
    backId: number
    _all: number
  }


  export type ReactorPairAvgAggregateInputType = {
    id?: true
    frontId?: true
    backId?: true
  }

  export type ReactorPairSumAggregateInputType = {
    id?: true
    frontId?: true
    backId?: true
  }

  export type ReactorPairMinAggregateInputType = {
    id?: true
    frontId?: true
    backId?: true
  }

  export type ReactorPairMaxAggregateInputType = {
    id?: true
    frontId?: true
    backId?: true
  }

  export type ReactorPairCountAggregateInputType = {
    id?: true
    frontId?: true
    backId?: true
    _all?: true
  }

  export type ReactorPairAggregateArgs = {
    /**
     * Filter which ReactorPair to aggregate.
     * 
    **/
    where?: ReactorPairWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReactorPairs to fetch.
     * 
    **/
    orderBy?: Enumerable<ReactorPairOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ReactorPairWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReactorPairs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReactorPairs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReactorPairs
    **/
    _count?: true | ReactorPairCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReactorPairAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReactorPairSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReactorPairMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReactorPairMaxAggregateInputType
  }

  export type GetReactorPairAggregateType<T extends ReactorPairAggregateArgs> = {
        [P in keyof T & keyof AggregateReactorPair]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReactorPair[P]>
      : GetScalarType<T[P], AggregateReactorPair[P]>
  }




  export type ReactorPairGroupByArgs = {
    where?: ReactorPairWhereInput
    orderBy?: Enumerable<ReactorPairOrderByWithAggregationInput>
    by: Array<ReactorPairScalarFieldEnum>
    having?: ReactorPairScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReactorPairCountAggregateInputType | true
    _avg?: ReactorPairAvgAggregateInputType
    _sum?: ReactorPairSumAggregateInputType
    _min?: ReactorPairMinAggregateInputType
    _max?: ReactorPairMaxAggregateInputType
  }


  export type ReactorPairGroupByOutputType = {
    id: number
    frontId: number
    backId: number
    _count: ReactorPairCountAggregateOutputType | null
    _avg: ReactorPairAvgAggregateOutputType | null
    _sum: ReactorPairSumAggregateOutputType | null
    _min: ReactorPairMinAggregateOutputType | null
    _max: ReactorPairMaxAggregateOutputType | null
  }

  type GetReactorPairGroupByPayload<T extends ReactorPairGroupByArgs> = Promise<
    Array<
      PickArray<ReactorPairGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReactorPairGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReactorPairGroupByOutputType[P]>
            : GetScalarType<T[P], ReactorPairGroupByOutputType[P]>
        }
      >
    >


  export type ReactorPairSelect = {
    id?: boolean
    frontId?: boolean
    backId?: boolean
    front?: boolean | ReactorArgs
    back?: boolean | ReactorArgs
  }

  export type ReactorPairInclude = {
    front?: boolean | ReactorArgs
    back?: boolean | ReactorArgs
  }

  export type ReactorPairGetPayload<
    S extends boolean | null | undefined | ReactorPairArgs,
    U = keyof S
      > = S extends true
        ? ReactorPair
    : S extends undefined
    ? never
    : S extends ReactorPairArgs | ReactorPairFindManyArgs
    ?'include' extends U
    ? ReactorPair  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'front'
        ? ReactorGetPayload<S['include'][P]> :
        P extends 'back'
        ? ReactorGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ReactorPair ?ReactorPair [P]
  : 
          P extends 'front'
        ? ReactorGetPayload<S['select'][P]> :
        P extends 'back'
        ? ReactorGetPayload<S['select'][P]> : never
  } 
    : ReactorPair
  : ReactorPair


  type ReactorPairCountArgs = Merge<
    Omit<ReactorPairFindManyArgs, 'select' | 'include'> & {
      select?: ReactorPairCountAggregateInputType | true
    }
  >

  export interface ReactorPairDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ReactorPair that matches the filter.
     * @param {ReactorPairFindUniqueArgs} args - Arguments to find a ReactorPair
     * @example
     * // Get one ReactorPair
     * const reactorPair = await prisma.reactorPair.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReactorPairFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReactorPairFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ReactorPair'> extends True ? CheckSelect<T, Prisma__ReactorPairClient<ReactorPair>, Prisma__ReactorPairClient<ReactorPairGetPayload<T>>> : CheckSelect<T, Prisma__ReactorPairClient<ReactorPair | null >, Prisma__ReactorPairClient<ReactorPairGetPayload<T> | null >>

    /**
     * Find the first ReactorPair that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactorPairFindFirstArgs} args - Arguments to find a ReactorPair
     * @example
     * // Get one ReactorPair
     * const reactorPair = await prisma.reactorPair.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReactorPairFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReactorPairFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ReactorPair'> extends True ? CheckSelect<T, Prisma__ReactorPairClient<ReactorPair>, Prisma__ReactorPairClient<ReactorPairGetPayload<T>>> : CheckSelect<T, Prisma__ReactorPairClient<ReactorPair | null >, Prisma__ReactorPairClient<ReactorPairGetPayload<T> | null >>

    /**
     * Find zero or more ReactorPairs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactorPairFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReactorPairs
     * const reactorPairs = await prisma.reactorPair.findMany()
     * 
     * // Get first 10 ReactorPairs
     * const reactorPairs = await prisma.reactorPair.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reactorPairWithIdOnly = await prisma.reactorPair.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReactorPairFindManyArgs>(
      args?: SelectSubset<T, ReactorPairFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ReactorPair>>, PrismaPromise<Array<ReactorPairGetPayload<T>>>>

    /**
     * Create a ReactorPair.
     * @param {ReactorPairCreateArgs} args - Arguments to create a ReactorPair.
     * @example
     * // Create one ReactorPair
     * const ReactorPair = await prisma.reactorPair.create({
     *   data: {
     *     // ... data to create a ReactorPair
     *   }
     * })
     * 
    **/
    create<T extends ReactorPairCreateArgs>(
      args: SelectSubset<T, ReactorPairCreateArgs>
    ): CheckSelect<T, Prisma__ReactorPairClient<ReactorPair>, Prisma__ReactorPairClient<ReactorPairGetPayload<T>>>

    /**
     * Create many ReactorPairs.
     *     @param {ReactorPairCreateManyArgs} args - Arguments to create many ReactorPairs.
     *     @example
     *     // Create many ReactorPairs
     *     const reactorPair = await prisma.reactorPair.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReactorPairCreateManyArgs>(
      args?: SelectSubset<T, ReactorPairCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ReactorPair.
     * @param {ReactorPairDeleteArgs} args - Arguments to delete one ReactorPair.
     * @example
     * // Delete one ReactorPair
     * const ReactorPair = await prisma.reactorPair.delete({
     *   where: {
     *     // ... filter to delete one ReactorPair
     *   }
     * })
     * 
    **/
    delete<T extends ReactorPairDeleteArgs>(
      args: SelectSubset<T, ReactorPairDeleteArgs>
    ): CheckSelect<T, Prisma__ReactorPairClient<ReactorPair>, Prisma__ReactorPairClient<ReactorPairGetPayload<T>>>

    /**
     * Update one ReactorPair.
     * @param {ReactorPairUpdateArgs} args - Arguments to update one ReactorPair.
     * @example
     * // Update one ReactorPair
     * const reactorPair = await prisma.reactorPair.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReactorPairUpdateArgs>(
      args: SelectSubset<T, ReactorPairUpdateArgs>
    ): CheckSelect<T, Prisma__ReactorPairClient<ReactorPair>, Prisma__ReactorPairClient<ReactorPairGetPayload<T>>>

    /**
     * Delete zero or more ReactorPairs.
     * @param {ReactorPairDeleteManyArgs} args - Arguments to filter ReactorPairs to delete.
     * @example
     * // Delete a few ReactorPairs
     * const { count } = await prisma.reactorPair.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReactorPairDeleteManyArgs>(
      args?: SelectSubset<T, ReactorPairDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReactorPairs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactorPairUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReactorPairs
     * const reactorPair = await prisma.reactorPair.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReactorPairUpdateManyArgs>(
      args: SelectSubset<T, ReactorPairUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ReactorPair.
     * @param {ReactorPairUpsertArgs} args - Arguments to update or create a ReactorPair.
     * @example
     * // Update or create a ReactorPair
     * const reactorPair = await prisma.reactorPair.upsert({
     *   create: {
     *     // ... data to create a ReactorPair
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReactorPair we want to update
     *   }
     * })
    **/
    upsert<T extends ReactorPairUpsertArgs>(
      args: SelectSubset<T, ReactorPairUpsertArgs>
    ): CheckSelect<T, Prisma__ReactorPairClient<ReactorPair>, Prisma__ReactorPairClient<ReactorPairGetPayload<T>>>

    /**
     * Count the number of ReactorPairs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactorPairCountArgs} args - Arguments to filter ReactorPairs to count.
     * @example
     * // Count the number of ReactorPairs
     * const count = await prisma.reactorPair.count({
     *   where: {
     *     // ... the filter for the ReactorPairs we want to count
     *   }
     * })
    **/
    count<T extends ReactorPairCountArgs>(
      args?: Subset<T, ReactorPairCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReactorPairCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReactorPair.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactorPairAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReactorPairAggregateArgs>(args: Subset<T, ReactorPairAggregateArgs>): PrismaPromise<GetReactorPairAggregateType<T>>

    /**
     * Group by ReactorPair.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactorPairGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReactorPairGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReactorPairGroupByArgs['orderBy'] }
        : { orderBy?: ReactorPairGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReactorPairGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReactorPairGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReactorPair.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReactorPairClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    front<T extends ReactorArgs = {}>(args?: Subset<T, ReactorArgs>): CheckSelect<T, Prisma__ReactorClient<Reactor | null >, Prisma__ReactorClient<ReactorGetPayload<T> | null >>;

    back<T extends ReactorArgs = {}>(args?: Subset<T, ReactorArgs>): CheckSelect<T, Prisma__ReactorClient<Reactor | null >, Prisma__ReactorClient<ReactorGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ReactorPair findUnique
   */
  export type ReactorPairFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ReactorPair
     * 
    **/
    select?: ReactorPairSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactorPairInclude | null
    /**
     * Throw an Error if a ReactorPair can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ReactorPair to fetch.
     * 
    **/
    where: ReactorPairWhereUniqueInput
  }


  /**
   * ReactorPair findFirst
   */
  export type ReactorPairFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ReactorPair
     * 
    **/
    select?: ReactorPairSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactorPairInclude | null
    /**
     * Throw an Error if a ReactorPair can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ReactorPair to fetch.
     * 
    **/
    where?: ReactorPairWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReactorPairs to fetch.
     * 
    **/
    orderBy?: Enumerable<ReactorPairOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReactorPairs.
     * 
    **/
    cursor?: ReactorPairWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReactorPairs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReactorPairs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReactorPairs.
     * 
    **/
    distinct?: Enumerable<ReactorPairScalarFieldEnum>
  }


  /**
   * ReactorPair findMany
   */
  export type ReactorPairFindManyArgs = {
    /**
     * Select specific fields to fetch from the ReactorPair
     * 
    **/
    select?: ReactorPairSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactorPairInclude | null
    /**
     * Filter, which ReactorPairs to fetch.
     * 
    **/
    where?: ReactorPairWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReactorPairs to fetch.
     * 
    **/
    orderBy?: Enumerable<ReactorPairOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReactorPairs.
     * 
    **/
    cursor?: ReactorPairWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReactorPairs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReactorPairs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ReactorPairScalarFieldEnum>
  }


  /**
   * ReactorPair create
   */
  export type ReactorPairCreateArgs = {
    /**
     * Select specific fields to fetch from the ReactorPair
     * 
    **/
    select?: ReactorPairSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactorPairInclude | null
    /**
     * The data needed to create a ReactorPair.
     * 
    **/
    data: XOR<ReactorPairCreateInput, ReactorPairUncheckedCreateInput>
  }


  /**
   * ReactorPair createMany
   */
  export type ReactorPairCreateManyArgs = {
    data: Enumerable<ReactorPairCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ReactorPair update
   */
  export type ReactorPairUpdateArgs = {
    /**
     * Select specific fields to fetch from the ReactorPair
     * 
    **/
    select?: ReactorPairSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactorPairInclude | null
    /**
     * The data needed to update a ReactorPair.
     * 
    **/
    data: XOR<ReactorPairUpdateInput, ReactorPairUncheckedUpdateInput>
    /**
     * Choose, which ReactorPair to update.
     * 
    **/
    where: ReactorPairWhereUniqueInput
  }


  /**
   * ReactorPair updateMany
   */
  export type ReactorPairUpdateManyArgs = {
    data: XOR<ReactorPairUpdateManyMutationInput, ReactorPairUncheckedUpdateManyInput>
    where?: ReactorPairWhereInput
  }


  /**
   * ReactorPair upsert
   */
  export type ReactorPairUpsertArgs = {
    /**
     * Select specific fields to fetch from the ReactorPair
     * 
    **/
    select?: ReactorPairSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactorPairInclude | null
    /**
     * The filter to search for the ReactorPair to update in case it exists.
     * 
    **/
    where: ReactorPairWhereUniqueInput
    /**
     * In case the ReactorPair found by the `where` argument doesn't exist, create a new ReactorPair with this data.
     * 
    **/
    create: XOR<ReactorPairCreateInput, ReactorPairUncheckedCreateInput>
    /**
     * In case the ReactorPair was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ReactorPairUpdateInput, ReactorPairUncheckedUpdateInput>
  }


  /**
   * ReactorPair delete
   */
  export type ReactorPairDeleteArgs = {
    /**
     * Select specific fields to fetch from the ReactorPair
     * 
    **/
    select?: ReactorPairSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactorPairInclude | null
    /**
     * Filter which ReactorPair to delete.
     * 
    **/
    where: ReactorPairWhereUniqueInput
  }


  /**
   * ReactorPair deleteMany
   */
  export type ReactorPairDeleteManyArgs = {
    where?: ReactorPairWhereInput
  }


  /**
   * ReactorPair without action
   */
  export type ReactorPairArgs = {
    /**
     * Select specific fields to fetch from the ReactorPair
     * 
    **/
    select?: ReactorPairSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactorPairInclude | null
  }



  /**
   * Model Reactor
   */


  export type AggregateReactor = {
    _count: ReactorCountAggregateOutputType | null
    _avg: ReactorAvgAggregateOutputType | null
    _sum: ReactorSumAggregateOutputType | null
    _min: ReactorMinAggregateOutputType | null
    _max: ReactorMaxAggregateOutputType | null
  }

  export type ReactorAvgAggregateOutputType = {
    id: number | null
    mass: number | null
    radHard: number | null
    thrustModifier: number | null
    fuelModifier: number | null
    coolingReq: number | null
  }

  export type ReactorSumAggregateOutputType = {
    id: number | null
    mass: number | null
    radHard: number | null
    thrustModifier: number | null
    fuelModifier: number | null
    coolingReq: number | null
  }

  export type ReactorMinAggregateOutputType = {
    id: number | null
    name: string | null
    mass: number | null
    radHard: number | null
    spectralClass: SpectralClass | null
    thrustModifier: number | null
    fuelModifier: number | null
    coolingReq: number | null
    generatorReq: GeneratorTech | null
    ReactorReq: ReactorTech | null
  }

  export type ReactorMaxAggregateOutputType = {
    id: number | null
    name: string | null
    mass: number | null
    radHard: number | null
    spectralClass: SpectralClass | null
    thrustModifier: number | null
    fuelModifier: number | null
    coolingReq: number | null
    generatorReq: GeneratorTech | null
    ReactorReq: ReactorTech | null
  }

  export type ReactorCountAggregateOutputType = {
    id: number
    name: number
    mass: number
    radHard: number
    spectralClass: number
    techs: number
    thrustModifier: number
    fuelModifier: number
    abilities: number
    coolingReq: number
    generatorReq: number
    ReactorReq: number
    _all: number
  }


  export type ReactorAvgAggregateInputType = {
    id?: true
    mass?: true
    radHard?: true
    thrustModifier?: true
    fuelModifier?: true
    coolingReq?: true
  }

  export type ReactorSumAggregateInputType = {
    id?: true
    mass?: true
    radHard?: true
    thrustModifier?: true
    fuelModifier?: true
    coolingReq?: true
  }

  export type ReactorMinAggregateInputType = {
    id?: true
    name?: true
    mass?: true
    radHard?: true
    spectralClass?: true
    thrustModifier?: true
    fuelModifier?: true
    coolingReq?: true
    generatorReq?: true
    ReactorReq?: true
  }

  export type ReactorMaxAggregateInputType = {
    id?: true
    name?: true
    mass?: true
    radHard?: true
    spectralClass?: true
    thrustModifier?: true
    fuelModifier?: true
    coolingReq?: true
    generatorReq?: true
    ReactorReq?: true
  }

  export type ReactorCountAggregateInputType = {
    id?: true
    name?: true
    mass?: true
    radHard?: true
    spectralClass?: true
    techs?: true
    thrustModifier?: true
    fuelModifier?: true
    abilities?: true
    coolingReq?: true
    generatorReq?: true
    ReactorReq?: true
    _all?: true
  }

  export type ReactorAggregateArgs = {
    /**
     * Filter which Reactor to aggregate.
     * 
    **/
    where?: ReactorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reactors to fetch.
     * 
    **/
    orderBy?: Enumerable<ReactorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ReactorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reactors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reactors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reactors
    **/
    _count?: true | ReactorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReactorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReactorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReactorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReactorMaxAggregateInputType
  }

  export type GetReactorAggregateType<T extends ReactorAggregateArgs> = {
        [P in keyof T & keyof AggregateReactor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReactor[P]>
      : GetScalarType<T[P], AggregateReactor[P]>
  }




  export type ReactorGroupByArgs = {
    where?: ReactorWhereInput
    orderBy?: Enumerable<ReactorOrderByWithAggregationInput>
    by: Array<ReactorScalarFieldEnum>
    having?: ReactorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReactorCountAggregateInputType | true
    _avg?: ReactorAvgAggregateInputType
    _sum?: ReactorSumAggregateInputType
    _min?: ReactorMinAggregateInputType
    _max?: ReactorMaxAggregateInputType
  }


  export type ReactorGroupByOutputType = {
    id: number
    name: string
    mass: number
    radHard: number
    spectralClass: SpectralClass
    techs: GeneratorTech[]
    thrustModifier: number
    fuelModifier: number
    abilities: Abilities[]
    coolingReq: number
    generatorReq: GeneratorTech
    ReactorReq: ReactorTech
    _count: ReactorCountAggregateOutputType | null
    _avg: ReactorAvgAggregateOutputType | null
    _sum: ReactorSumAggregateOutputType | null
    _min: ReactorMinAggregateOutputType | null
    _max: ReactorMaxAggregateOutputType | null
  }

  type GetReactorGroupByPayload<T extends ReactorGroupByArgs> = Promise<
    Array<
      PickArray<ReactorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReactorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReactorGroupByOutputType[P]>
            : GetScalarType<T[P], ReactorGroupByOutputType[P]>
        }
      >
    >


  export type ReactorSelect = {
    id?: boolean
    name?: boolean
    mass?: boolean
    radHard?: boolean
    spectralClass?: boolean
    techs?: boolean
    thrustModifier?: boolean
    fuelModifier?: boolean
    abilities?: boolean
    coolingReq?: boolean
    generatorReq?: boolean
    ReactorReq?: boolean
    cardFront?: boolean | ReactorPairArgs
    cardBack?: boolean | ReactorPairArgs
  }

  export type ReactorInclude = {
    cardFront?: boolean | ReactorPairArgs
    cardBack?: boolean | ReactorPairArgs
  }

  export type ReactorGetPayload<
    S extends boolean | null | undefined | ReactorArgs,
    U = keyof S
      > = S extends true
        ? Reactor
    : S extends undefined
    ? never
    : S extends ReactorArgs | ReactorFindManyArgs
    ?'include' extends U
    ? Reactor  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'cardFront'
        ? ReactorPairGetPayload<S['include'][P]> | null :
        P extends 'cardBack'
        ? ReactorPairGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Reactor ?Reactor [P]
  : 
          P extends 'cardFront'
        ? ReactorPairGetPayload<S['select'][P]> | null :
        P extends 'cardBack'
        ? ReactorPairGetPayload<S['select'][P]> | null : never
  } 
    : Reactor
  : Reactor


  type ReactorCountArgs = Merge<
    Omit<ReactorFindManyArgs, 'select' | 'include'> & {
      select?: ReactorCountAggregateInputType | true
    }
  >

  export interface ReactorDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Reactor that matches the filter.
     * @param {ReactorFindUniqueArgs} args - Arguments to find a Reactor
     * @example
     * // Get one Reactor
     * const reactor = await prisma.reactor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReactorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReactorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Reactor'> extends True ? CheckSelect<T, Prisma__ReactorClient<Reactor>, Prisma__ReactorClient<ReactorGetPayload<T>>> : CheckSelect<T, Prisma__ReactorClient<Reactor | null >, Prisma__ReactorClient<ReactorGetPayload<T> | null >>

    /**
     * Find the first Reactor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactorFindFirstArgs} args - Arguments to find a Reactor
     * @example
     * // Get one Reactor
     * const reactor = await prisma.reactor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReactorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReactorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Reactor'> extends True ? CheckSelect<T, Prisma__ReactorClient<Reactor>, Prisma__ReactorClient<ReactorGetPayload<T>>> : CheckSelect<T, Prisma__ReactorClient<Reactor | null >, Prisma__ReactorClient<ReactorGetPayload<T> | null >>

    /**
     * Find zero or more Reactors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reactors
     * const reactors = await prisma.reactor.findMany()
     * 
     * // Get first 10 Reactors
     * const reactors = await prisma.reactor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reactorWithIdOnly = await prisma.reactor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReactorFindManyArgs>(
      args?: SelectSubset<T, ReactorFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Reactor>>, PrismaPromise<Array<ReactorGetPayload<T>>>>

    /**
     * Create a Reactor.
     * @param {ReactorCreateArgs} args - Arguments to create a Reactor.
     * @example
     * // Create one Reactor
     * const Reactor = await prisma.reactor.create({
     *   data: {
     *     // ... data to create a Reactor
     *   }
     * })
     * 
    **/
    create<T extends ReactorCreateArgs>(
      args: SelectSubset<T, ReactorCreateArgs>
    ): CheckSelect<T, Prisma__ReactorClient<Reactor>, Prisma__ReactorClient<ReactorGetPayload<T>>>

    /**
     * Create many Reactors.
     *     @param {ReactorCreateManyArgs} args - Arguments to create many Reactors.
     *     @example
     *     // Create many Reactors
     *     const reactor = await prisma.reactor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReactorCreateManyArgs>(
      args?: SelectSubset<T, ReactorCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Reactor.
     * @param {ReactorDeleteArgs} args - Arguments to delete one Reactor.
     * @example
     * // Delete one Reactor
     * const Reactor = await prisma.reactor.delete({
     *   where: {
     *     // ... filter to delete one Reactor
     *   }
     * })
     * 
    **/
    delete<T extends ReactorDeleteArgs>(
      args: SelectSubset<T, ReactorDeleteArgs>
    ): CheckSelect<T, Prisma__ReactorClient<Reactor>, Prisma__ReactorClient<ReactorGetPayload<T>>>

    /**
     * Update one Reactor.
     * @param {ReactorUpdateArgs} args - Arguments to update one Reactor.
     * @example
     * // Update one Reactor
     * const reactor = await prisma.reactor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReactorUpdateArgs>(
      args: SelectSubset<T, ReactorUpdateArgs>
    ): CheckSelect<T, Prisma__ReactorClient<Reactor>, Prisma__ReactorClient<ReactorGetPayload<T>>>

    /**
     * Delete zero or more Reactors.
     * @param {ReactorDeleteManyArgs} args - Arguments to filter Reactors to delete.
     * @example
     * // Delete a few Reactors
     * const { count } = await prisma.reactor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReactorDeleteManyArgs>(
      args?: SelectSubset<T, ReactorDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reactors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reactors
     * const reactor = await prisma.reactor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReactorUpdateManyArgs>(
      args: SelectSubset<T, ReactorUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Reactor.
     * @param {ReactorUpsertArgs} args - Arguments to update or create a Reactor.
     * @example
     * // Update or create a Reactor
     * const reactor = await prisma.reactor.upsert({
     *   create: {
     *     // ... data to create a Reactor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reactor we want to update
     *   }
     * })
    **/
    upsert<T extends ReactorUpsertArgs>(
      args: SelectSubset<T, ReactorUpsertArgs>
    ): CheckSelect<T, Prisma__ReactorClient<Reactor>, Prisma__ReactorClient<ReactorGetPayload<T>>>

    /**
     * Count the number of Reactors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactorCountArgs} args - Arguments to filter Reactors to count.
     * @example
     * // Count the number of Reactors
     * const count = await prisma.reactor.count({
     *   where: {
     *     // ... the filter for the Reactors we want to count
     *   }
     * })
    **/
    count<T extends ReactorCountArgs>(
      args?: Subset<T, ReactorCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReactorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reactor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReactorAggregateArgs>(args: Subset<T, ReactorAggregateArgs>): PrismaPromise<GetReactorAggregateType<T>>

    /**
     * Group by Reactor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReactorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReactorGroupByArgs['orderBy'] }
        : { orderBy?: ReactorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReactorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReactorGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reactor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReactorClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    cardFront<T extends ReactorPairArgs = {}>(args?: Subset<T, ReactorPairArgs>): CheckSelect<T, Prisma__ReactorPairClient<ReactorPair | null >, Prisma__ReactorPairClient<ReactorPairGetPayload<T> | null >>;

    cardBack<T extends ReactorPairArgs = {}>(args?: Subset<T, ReactorPairArgs>): CheckSelect<T, Prisma__ReactorPairClient<ReactorPair | null >, Prisma__ReactorPairClient<ReactorPairGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Reactor findUnique
   */
  export type ReactorFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Reactor
     * 
    **/
    select?: ReactorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactorInclude | null
    /**
     * Throw an Error if a Reactor can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Reactor to fetch.
     * 
    **/
    where: ReactorWhereUniqueInput
  }


  /**
   * Reactor findFirst
   */
  export type ReactorFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Reactor
     * 
    **/
    select?: ReactorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactorInclude | null
    /**
     * Throw an Error if a Reactor can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Reactor to fetch.
     * 
    **/
    where?: ReactorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reactors to fetch.
     * 
    **/
    orderBy?: Enumerable<ReactorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reactors.
     * 
    **/
    cursor?: ReactorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reactors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reactors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reactors.
     * 
    **/
    distinct?: Enumerable<ReactorScalarFieldEnum>
  }


  /**
   * Reactor findMany
   */
  export type ReactorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Reactor
     * 
    **/
    select?: ReactorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactorInclude | null
    /**
     * Filter, which Reactors to fetch.
     * 
    **/
    where?: ReactorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reactors to fetch.
     * 
    **/
    orderBy?: Enumerable<ReactorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reactors.
     * 
    **/
    cursor?: ReactorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reactors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reactors.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ReactorScalarFieldEnum>
  }


  /**
   * Reactor create
   */
  export type ReactorCreateArgs = {
    /**
     * Select specific fields to fetch from the Reactor
     * 
    **/
    select?: ReactorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactorInclude | null
    /**
     * The data needed to create a Reactor.
     * 
    **/
    data: XOR<ReactorCreateInput, ReactorUncheckedCreateInput>
  }


  /**
   * Reactor createMany
   */
  export type ReactorCreateManyArgs = {
    data: Enumerable<ReactorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Reactor update
   */
  export type ReactorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Reactor
     * 
    **/
    select?: ReactorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactorInclude | null
    /**
     * The data needed to update a Reactor.
     * 
    **/
    data: XOR<ReactorUpdateInput, ReactorUncheckedUpdateInput>
    /**
     * Choose, which Reactor to update.
     * 
    **/
    where: ReactorWhereUniqueInput
  }


  /**
   * Reactor updateMany
   */
  export type ReactorUpdateManyArgs = {
    data: XOR<ReactorUpdateManyMutationInput, ReactorUncheckedUpdateManyInput>
    where?: ReactorWhereInput
  }


  /**
   * Reactor upsert
   */
  export type ReactorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Reactor
     * 
    **/
    select?: ReactorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactorInclude | null
    /**
     * The filter to search for the Reactor to update in case it exists.
     * 
    **/
    where: ReactorWhereUniqueInput
    /**
     * In case the Reactor found by the `where` argument doesn't exist, create a new Reactor with this data.
     * 
    **/
    create: XOR<ReactorCreateInput, ReactorUncheckedCreateInput>
    /**
     * In case the Reactor was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ReactorUpdateInput, ReactorUncheckedUpdateInput>
  }


  /**
   * Reactor delete
   */
  export type ReactorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Reactor
     * 
    **/
    select?: ReactorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactorInclude | null
    /**
     * Filter which Reactor to delete.
     * 
    **/
    where: ReactorWhereUniqueInput
  }


  /**
   * Reactor deleteMany
   */
  export type ReactorDeleteManyArgs = {
    where?: ReactorWhereInput
  }


  /**
   * Reactor without action
   */
  export type ReactorArgs = {
    /**
     * Select specific fields to fetch from the Reactor
     * 
    **/
    select?: ReactorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactorInclude | null
  }



  /**
   * Model GeneratorPair
   */


  export type AggregateGeneratorPair = {
    _count: GeneratorPairCountAggregateOutputType | null
    _avg: GeneratorPairAvgAggregateOutputType | null
    _sum: GeneratorPairSumAggregateOutputType | null
    _min: GeneratorPairMinAggregateOutputType | null
    _max: GeneratorPairMaxAggregateOutputType | null
  }

  export type GeneratorPairAvgAggregateOutputType = {
    id: number | null
    frontId: number | null
    backId: number | null
  }

  export type GeneratorPairSumAggregateOutputType = {
    id: number | null
    frontId: number | null
    backId: number | null
  }

  export type GeneratorPairMinAggregateOutputType = {
    id: number | null
    frontId: number | null
    backId: number | null
  }

  export type GeneratorPairMaxAggregateOutputType = {
    id: number | null
    frontId: number | null
    backId: number | null
  }

  export type GeneratorPairCountAggregateOutputType = {
    id: number
    frontId: number
    backId: number
    _all: number
  }


  export type GeneratorPairAvgAggregateInputType = {
    id?: true
    frontId?: true
    backId?: true
  }

  export type GeneratorPairSumAggregateInputType = {
    id?: true
    frontId?: true
    backId?: true
  }

  export type GeneratorPairMinAggregateInputType = {
    id?: true
    frontId?: true
    backId?: true
  }

  export type GeneratorPairMaxAggregateInputType = {
    id?: true
    frontId?: true
    backId?: true
  }

  export type GeneratorPairCountAggregateInputType = {
    id?: true
    frontId?: true
    backId?: true
    _all?: true
  }

  export type GeneratorPairAggregateArgs = {
    /**
     * Filter which GeneratorPair to aggregate.
     * 
    **/
    where?: GeneratorPairWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratorPairs to fetch.
     * 
    **/
    orderBy?: Enumerable<GeneratorPairOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GeneratorPairWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratorPairs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratorPairs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GeneratorPairs
    **/
    _count?: true | GeneratorPairCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GeneratorPairAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GeneratorPairSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GeneratorPairMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GeneratorPairMaxAggregateInputType
  }

  export type GetGeneratorPairAggregateType<T extends GeneratorPairAggregateArgs> = {
        [P in keyof T & keyof AggregateGeneratorPair]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGeneratorPair[P]>
      : GetScalarType<T[P], AggregateGeneratorPair[P]>
  }




  export type GeneratorPairGroupByArgs = {
    where?: GeneratorPairWhereInput
    orderBy?: Enumerable<GeneratorPairOrderByWithAggregationInput>
    by: Array<GeneratorPairScalarFieldEnum>
    having?: GeneratorPairScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GeneratorPairCountAggregateInputType | true
    _avg?: GeneratorPairAvgAggregateInputType
    _sum?: GeneratorPairSumAggregateInputType
    _min?: GeneratorPairMinAggregateInputType
    _max?: GeneratorPairMaxAggregateInputType
  }


  export type GeneratorPairGroupByOutputType = {
    id: number
    frontId: number
    backId: number
    _count: GeneratorPairCountAggregateOutputType | null
    _avg: GeneratorPairAvgAggregateOutputType | null
    _sum: GeneratorPairSumAggregateOutputType | null
    _min: GeneratorPairMinAggregateOutputType | null
    _max: GeneratorPairMaxAggregateOutputType | null
  }

  type GetGeneratorPairGroupByPayload<T extends GeneratorPairGroupByArgs> = Promise<
    Array<
      PickArray<GeneratorPairGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GeneratorPairGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GeneratorPairGroupByOutputType[P]>
            : GetScalarType<T[P], GeneratorPairGroupByOutputType[P]>
        }
      >
    >


  export type GeneratorPairSelect = {
    id?: boolean
    frontId?: boolean
    backId?: boolean
    front?: boolean | GeneratorArgs
    back?: boolean | GeneratorArgs
  }

  export type GeneratorPairInclude = {
    front?: boolean | GeneratorArgs
    back?: boolean | GeneratorArgs
  }

  export type GeneratorPairGetPayload<
    S extends boolean | null | undefined | GeneratorPairArgs,
    U = keyof S
      > = S extends true
        ? GeneratorPair
    : S extends undefined
    ? never
    : S extends GeneratorPairArgs | GeneratorPairFindManyArgs
    ?'include' extends U
    ? GeneratorPair  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'front'
        ? GeneratorGetPayload<S['include'][P]> :
        P extends 'back'
        ? GeneratorGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof GeneratorPair ?GeneratorPair [P]
  : 
          P extends 'front'
        ? GeneratorGetPayload<S['select'][P]> :
        P extends 'back'
        ? GeneratorGetPayload<S['select'][P]> : never
  } 
    : GeneratorPair
  : GeneratorPair


  type GeneratorPairCountArgs = Merge<
    Omit<GeneratorPairFindManyArgs, 'select' | 'include'> & {
      select?: GeneratorPairCountAggregateInputType | true
    }
  >

  export interface GeneratorPairDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one GeneratorPair that matches the filter.
     * @param {GeneratorPairFindUniqueArgs} args - Arguments to find a GeneratorPair
     * @example
     * // Get one GeneratorPair
     * const generatorPair = await prisma.generatorPair.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GeneratorPairFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GeneratorPairFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'GeneratorPair'> extends True ? CheckSelect<T, Prisma__GeneratorPairClient<GeneratorPair>, Prisma__GeneratorPairClient<GeneratorPairGetPayload<T>>> : CheckSelect<T, Prisma__GeneratorPairClient<GeneratorPair | null >, Prisma__GeneratorPairClient<GeneratorPairGetPayload<T> | null >>

    /**
     * Find the first GeneratorPair that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratorPairFindFirstArgs} args - Arguments to find a GeneratorPair
     * @example
     * // Get one GeneratorPair
     * const generatorPair = await prisma.generatorPair.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GeneratorPairFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GeneratorPairFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'GeneratorPair'> extends True ? CheckSelect<T, Prisma__GeneratorPairClient<GeneratorPair>, Prisma__GeneratorPairClient<GeneratorPairGetPayload<T>>> : CheckSelect<T, Prisma__GeneratorPairClient<GeneratorPair | null >, Prisma__GeneratorPairClient<GeneratorPairGetPayload<T> | null >>

    /**
     * Find zero or more GeneratorPairs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratorPairFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GeneratorPairs
     * const generatorPairs = await prisma.generatorPair.findMany()
     * 
     * // Get first 10 GeneratorPairs
     * const generatorPairs = await prisma.generatorPair.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const generatorPairWithIdOnly = await prisma.generatorPair.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GeneratorPairFindManyArgs>(
      args?: SelectSubset<T, GeneratorPairFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<GeneratorPair>>, PrismaPromise<Array<GeneratorPairGetPayload<T>>>>

    /**
     * Create a GeneratorPair.
     * @param {GeneratorPairCreateArgs} args - Arguments to create a GeneratorPair.
     * @example
     * // Create one GeneratorPair
     * const GeneratorPair = await prisma.generatorPair.create({
     *   data: {
     *     // ... data to create a GeneratorPair
     *   }
     * })
     * 
    **/
    create<T extends GeneratorPairCreateArgs>(
      args: SelectSubset<T, GeneratorPairCreateArgs>
    ): CheckSelect<T, Prisma__GeneratorPairClient<GeneratorPair>, Prisma__GeneratorPairClient<GeneratorPairGetPayload<T>>>

    /**
     * Create many GeneratorPairs.
     *     @param {GeneratorPairCreateManyArgs} args - Arguments to create many GeneratorPairs.
     *     @example
     *     // Create many GeneratorPairs
     *     const generatorPair = await prisma.generatorPair.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GeneratorPairCreateManyArgs>(
      args?: SelectSubset<T, GeneratorPairCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a GeneratorPair.
     * @param {GeneratorPairDeleteArgs} args - Arguments to delete one GeneratorPair.
     * @example
     * // Delete one GeneratorPair
     * const GeneratorPair = await prisma.generatorPair.delete({
     *   where: {
     *     // ... filter to delete one GeneratorPair
     *   }
     * })
     * 
    **/
    delete<T extends GeneratorPairDeleteArgs>(
      args: SelectSubset<T, GeneratorPairDeleteArgs>
    ): CheckSelect<T, Prisma__GeneratorPairClient<GeneratorPair>, Prisma__GeneratorPairClient<GeneratorPairGetPayload<T>>>

    /**
     * Update one GeneratorPair.
     * @param {GeneratorPairUpdateArgs} args - Arguments to update one GeneratorPair.
     * @example
     * // Update one GeneratorPair
     * const generatorPair = await prisma.generatorPair.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GeneratorPairUpdateArgs>(
      args: SelectSubset<T, GeneratorPairUpdateArgs>
    ): CheckSelect<T, Prisma__GeneratorPairClient<GeneratorPair>, Prisma__GeneratorPairClient<GeneratorPairGetPayload<T>>>

    /**
     * Delete zero or more GeneratorPairs.
     * @param {GeneratorPairDeleteManyArgs} args - Arguments to filter GeneratorPairs to delete.
     * @example
     * // Delete a few GeneratorPairs
     * const { count } = await prisma.generatorPair.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GeneratorPairDeleteManyArgs>(
      args?: SelectSubset<T, GeneratorPairDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more GeneratorPairs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratorPairUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GeneratorPairs
     * const generatorPair = await prisma.generatorPair.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GeneratorPairUpdateManyArgs>(
      args: SelectSubset<T, GeneratorPairUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one GeneratorPair.
     * @param {GeneratorPairUpsertArgs} args - Arguments to update or create a GeneratorPair.
     * @example
     * // Update or create a GeneratorPair
     * const generatorPair = await prisma.generatorPair.upsert({
     *   create: {
     *     // ... data to create a GeneratorPair
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GeneratorPair we want to update
     *   }
     * })
    **/
    upsert<T extends GeneratorPairUpsertArgs>(
      args: SelectSubset<T, GeneratorPairUpsertArgs>
    ): CheckSelect<T, Prisma__GeneratorPairClient<GeneratorPair>, Prisma__GeneratorPairClient<GeneratorPairGetPayload<T>>>

    /**
     * Count the number of GeneratorPairs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratorPairCountArgs} args - Arguments to filter GeneratorPairs to count.
     * @example
     * // Count the number of GeneratorPairs
     * const count = await prisma.generatorPair.count({
     *   where: {
     *     // ... the filter for the GeneratorPairs we want to count
     *   }
     * })
    **/
    count<T extends GeneratorPairCountArgs>(
      args?: Subset<T, GeneratorPairCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GeneratorPairCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GeneratorPair.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratorPairAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GeneratorPairAggregateArgs>(args: Subset<T, GeneratorPairAggregateArgs>): PrismaPromise<GetGeneratorPairAggregateType<T>>

    /**
     * Group by GeneratorPair.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratorPairGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GeneratorPairGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GeneratorPairGroupByArgs['orderBy'] }
        : { orderBy?: GeneratorPairGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GeneratorPairGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGeneratorPairGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for GeneratorPair.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GeneratorPairClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    front<T extends GeneratorArgs = {}>(args?: Subset<T, GeneratorArgs>): CheckSelect<T, Prisma__GeneratorClient<Generator | null >, Prisma__GeneratorClient<GeneratorGetPayload<T> | null >>;

    back<T extends GeneratorArgs = {}>(args?: Subset<T, GeneratorArgs>): CheckSelect<T, Prisma__GeneratorClient<Generator | null >, Prisma__GeneratorClient<GeneratorGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * GeneratorPair findUnique
   */
  export type GeneratorPairFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the GeneratorPair
     * 
    **/
    select?: GeneratorPairSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GeneratorPairInclude | null
    /**
     * Throw an Error if a GeneratorPair can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which GeneratorPair to fetch.
     * 
    **/
    where: GeneratorPairWhereUniqueInput
  }


  /**
   * GeneratorPair findFirst
   */
  export type GeneratorPairFindFirstArgs = {
    /**
     * Select specific fields to fetch from the GeneratorPair
     * 
    **/
    select?: GeneratorPairSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GeneratorPairInclude | null
    /**
     * Throw an Error if a GeneratorPair can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which GeneratorPair to fetch.
     * 
    **/
    where?: GeneratorPairWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratorPairs to fetch.
     * 
    **/
    orderBy?: Enumerable<GeneratorPairOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneratorPairs.
     * 
    **/
    cursor?: GeneratorPairWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratorPairs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratorPairs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneratorPairs.
     * 
    **/
    distinct?: Enumerable<GeneratorPairScalarFieldEnum>
  }


  /**
   * GeneratorPair findMany
   */
  export type GeneratorPairFindManyArgs = {
    /**
     * Select specific fields to fetch from the GeneratorPair
     * 
    **/
    select?: GeneratorPairSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GeneratorPairInclude | null
    /**
     * Filter, which GeneratorPairs to fetch.
     * 
    **/
    where?: GeneratorPairWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratorPairs to fetch.
     * 
    **/
    orderBy?: Enumerable<GeneratorPairOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GeneratorPairs.
     * 
    **/
    cursor?: GeneratorPairWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratorPairs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratorPairs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GeneratorPairScalarFieldEnum>
  }


  /**
   * GeneratorPair create
   */
  export type GeneratorPairCreateArgs = {
    /**
     * Select specific fields to fetch from the GeneratorPair
     * 
    **/
    select?: GeneratorPairSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GeneratorPairInclude | null
    /**
     * The data needed to create a GeneratorPair.
     * 
    **/
    data: XOR<GeneratorPairCreateInput, GeneratorPairUncheckedCreateInput>
  }


  /**
   * GeneratorPair createMany
   */
  export type GeneratorPairCreateManyArgs = {
    data: Enumerable<GeneratorPairCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * GeneratorPair update
   */
  export type GeneratorPairUpdateArgs = {
    /**
     * Select specific fields to fetch from the GeneratorPair
     * 
    **/
    select?: GeneratorPairSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GeneratorPairInclude | null
    /**
     * The data needed to update a GeneratorPair.
     * 
    **/
    data: XOR<GeneratorPairUpdateInput, GeneratorPairUncheckedUpdateInput>
    /**
     * Choose, which GeneratorPair to update.
     * 
    **/
    where: GeneratorPairWhereUniqueInput
  }


  /**
   * GeneratorPair updateMany
   */
  export type GeneratorPairUpdateManyArgs = {
    data: XOR<GeneratorPairUpdateManyMutationInput, GeneratorPairUncheckedUpdateManyInput>
    where?: GeneratorPairWhereInput
  }


  /**
   * GeneratorPair upsert
   */
  export type GeneratorPairUpsertArgs = {
    /**
     * Select specific fields to fetch from the GeneratorPair
     * 
    **/
    select?: GeneratorPairSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GeneratorPairInclude | null
    /**
     * The filter to search for the GeneratorPair to update in case it exists.
     * 
    **/
    where: GeneratorPairWhereUniqueInput
    /**
     * In case the GeneratorPair found by the `where` argument doesn't exist, create a new GeneratorPair with this data.
     * 
    **/
    create: XOR<GeneratorPairCreateInput, GeneratorPairUncheckedCreateInput>
    /**
     * In case the GeneratorPair was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GeneratorPairUpdateInput, GeneratorPairUncheckedUpdateInput>
  }


  /**
   * GeneratorPair delete
   */
  export type GeneratorPairDeleteArgs = {
    /**
     * Select specific fields to fetch from the GeneratorPair
     * 
    **/
    select?: GeneratorPairSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GeneratorPairInclude | null
    /**
     * Filter which GeneratorPair to delete.
     * 
    **/
    where: GeneratorPairWhereUniqueInput
  }


  /**
   * GeneratorPair deleteMany
   */
  export type GeneratorPairDeleteManyArgs = {
    where?: GeneratorPairWhereInput
  }


  /**
   * GeneratorPair without action
   */
  export type GeneratorPairArgs = {
    /**
     * Select specific fields to fetch from the GeneratorPair
     * 
    **/
    select?: GeneratorPairSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GeneratorPairInclude | null
  }



  /**
   * Model Generator
   */


  export type AggregateGenerator = {
    _count: GeneratorCountAggregateOutputType | null
    _avg: GeneratorAvgAggregateOutputType | null
    _sum: GeneratorSumAggregateOutputType | null
    _min: GeneratorMinAggregateOutputType | null
    _max: GeneratorMaxAggregateOutputType | null
  }

  export type GeneratorAvgAggregateOutputType = {
    id: number | null
    mass: number | null
    radHard: number | null
    thrustModifier: number | null
    fuelModifier: number | null
    coolingReq: number | null
  }

  export type GeneratorSumAggregateOutputType = {
    id: number | null
    mass: number | null
    radHard: number | null
    thrustModifier: number | null
    fuelModifier: number | null
    coolingReq: number | null
  }

  export type GeneratorMinAggregateOutputType = {
    id: number | null
    name: string | null
    mass: number | null
    radHard: number | null
    spectralClass: SpectralClass | null
    thrustModifier: number | null
    fuelModifier: number | null
    coolingReq: number | null
  }

  export type GeneratorMaxAggregateOutputType = {
    id: number | null
    name: string | null
    mass: number | null
    radHard: number | null
    spectralClass: SpectralClass | null
    thrustModifier: number | null
    fuelModifier: number | null
    coolingReq: number | null
  }

  export type GeneratorCountAggregateOutputType = {
    id: number
    name: number
    mass: number
    radHard: number
    spectralClass: number
    techs: number
    thrustModifier: number
    fuelModifier: number
    abilities: number
    coolingReq: number
    generatorReq: number
    ReactorReq: number
    _all: number
  }


  export type GeneratorAvgAggregateInputType = {
    id?: true
    mass?: true
    radHard?: true
    thrustModifier?: true
    fuelModifier?: true
    coolingReq?: true
  }

  export type GeneratorSumAggregateInputType = {
    id?: true
    mass?: true
    radHard?: true
    thrustModifier?: true
    fuelModifier?: true
    coolingReq?: true
  }

  export type GeneratorMinAggregateInputType = {
    id?: true
    name?: true
    mass?: true
    radHard?: true
    spectralClass?: true
    thrustModifier?: true
    fuelModifier?: true
    coolingReq?: true
  }

  export type GeneratorMaxAggregateInputType = {
    id?: true
    name?: true
    mass?: true
    radHard?: true
    spectralClass?: true
    thrustModifier?: true
    fuelModifier?: true
    coolingReq?: true
  }

  export type GeneratorCountAggregateInputType = {
    id?: true
    name?: true
    mass?: true
    radHard?: true
    spectralClass?: true
    techs?: true
    thrustModifier?: true
    fuelModifier?: true
    abilities?: true
    coolingReq?: true
    generatorReq?: true
    ReactorReq?: true
    _all?: true
  }

  export type GeneratorAggregateArgs = {
    /**
     * Filter which Generator to aggregate.
     * 
    **/
    where?: GeneratorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Generators to fetch.
     * 
    **/
    orderBy?: Enumerable<GeneratorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GeneratorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Generators from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Generators.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Generators
    **/
    _count?: true | GeneratorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GeneratorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GeneratorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GeneratorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GeneratorMaxAggregateInputType
  }

  export type GetGeneratorAggregateType<T extends GeneratorAggregateArgs> = {
        [P in keyof T & keyof AggregateGenerator]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGenerator[P]>
      : GetScalarType<T[P], AggregateGenerator[P]>
  }




  export type GeneratorGroupByArgs = {
    where?: GeneratorWhereInput
    orderBy?: Enumerable<GeneratorOrderByWithAggregationInput>
    by: Array<GeneratorScalarFieldEnum>
    having?: GeneratorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GeneratorCountAggregateInputType | true
    _avg?: GeneratorAvgAggregateInputType
    _sum?: GeneratorSumAggregateInputType
    _min?: GeneratorMinAggregateInputType
    _max?: GeneratorMaxAggregateInputType
  }


  export type GeneratorGroupByOutputType = {
    id: number
    name: string
    mass: number
    radHard: number
    spectralClass: SpectralClass
    techs: GeneratorTech[]
    thrustModifier: number
    fuelModifier: number
    abilities: Abilities[]
    coolingReq: number
    generatorReq: GeneratorTech[]
    ReactorReq: ReactorTech[]
    _count: GeneratorCountAggregateOutputType | null
    _avg: GeneratorAvgAggregateOutputType | null
    _sum: GeneratorSumAggregateOutputType | null
    _min: GeneratorMinAggregateOutputType | null
    _max: GeneratorMaxAggregateOutputType | null
  }

  type GetGeneratorGroupByPayload<T extends GeneratorGroupByArgs> = Promise<
    Array<
      PickArray<GeneratorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GeneratorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GeneratorGroupByOutputType[P]>
            : GetScalarType<T[P], GeneratorGroupByOutputType[P]>
        }
      >
    >


  export type GeneratorSelect = {
    id?: boolean
    name?: boolean
    mass?: boolean
    radHard?: boolean
    spectralClass?: boolean
    techs?: boolean
    thrustModifier?: boolean
    fuelModifier?: boolean
    abilities?: boolean
    coolingReq?: boolean
    generatorReq?: boolean
    ReactorReq?: boolean
    cardFront?: boolean | GeneratorPairArgs
    cardBack?: boolean | GeneratorPairArgs
  }

  export type GeneratorInclude = {
    cardFront?: boolean | GeneratorPairArgs
    cardBack?: boolean | GeneratorPairArgs
  }

  export type GeneratorGetPayload<
    S extends boolean | null | undefined | GeneratorArgs,
    U = keyof S
      > = S extends true
        ? Generator
    : S extends undefined
    ? never
    : S extends GeneratorArgs | GeneratorFindManyArgs
    ?'include' extends U
    ? Generator  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'cardFront'
        ? GeneratorPairGetPayload<S['include'][P]> | null :
        P extends 'cardBack'
        ? GeneratorPairGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Generator ?Generator [P]
  : 
          P extends 'cardFront'
        ? GeneratorPairGetPayload<S['select'][P]> | null :
        P extends 'cardBack'
        ? GeneratorPairGetPayload<S['select'][P]> | null : never
  } 
    : Generator
  : Generator


  type GeneratorCountArgs = Merge<
    Omit<GeneratorFindManyArgs, 'select' | 'include'> & {
      select?: GeneratorCountAggregateInputType | true
    }
  >

  export interface GeneratorDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Generator that matches the filter.
     * @param {GeneratorFindUniqueArgs} args - Arguments to find a Generator
     * @example
     * // Get one Generator
     * const generator = await prisma.generator.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GeneratorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GeneratorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Generator'> extends True ? CheckSelect<T, Prisma__GeneratorClient<Generator>, Prisma__GeneratorClient<GeneratorGetPayload<T>>> : CheckSelect<T, Prisma__GeneratorClient<Generator | null >, Prisma__GeneratorClient<GeneratorGetPayload<T> | null >>

    /**
     * Find the first Generator that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratorFindFirstArgs} args - Arguments to find a Generator
     * @example
     * // Get one Generator
     * const generator = await prisma.generator.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GeneratorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GeneratorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Generator'> extends True ? CheckSelect<T, Prisma__GeneratorClient<Generator>, Prisma__GeneratorClient<GeneratorGetPayload<T>>> : CheckSelect<T, Prisma__GeneratorClient<Generator | null >, Prisma__GeneratorClient<GeneratorGetPayload<T> | null >>

    /**
     * Find zero or more Generators that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Generators
     * const generators = await prisma.generator.findMany()
     * 
     * // Get first 10 Generators
     * const generators = await prisma.generator.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const generatorWithIdOnly = await prisma.generator.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GeneratorFindManyArgs>(
      args?: SelectSubset<T, GeneratorFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Generator>>, PrismaPromise<Array<GeneratorGetPayload<T>>>>

    /**
     * Create a Generator.
     * @param {GeneratorCreateArgs} args - Arguments to create a Generator.
     * @example
     * // Create one Generator
     * const Generator = await prisma.generator.create({
     *   data: {
     *     // ... data to create a Generator
     *   }
     * })
     * 
    **/
    create<T extends GeneratorCreateArgs>(
      args: SelectSubset<T, GeneratorCreateArgs>
    ): CheckSelect<T, Prisma__GeneratorClient<Generator>, Prisma__GeneratorClient<GeneratorGetPayload<T>>>

    /**
     * Create many Generators.
     *     @param {GeneratorCreateManyArgs} args - Arguments to create many Generators.
     *     @example
     *     // Create many Generators
     *     const generator = await prisma.generator.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GeneratorCreateManyArgs>(
      args?: SelectSubset<T, GeneratorCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Generator.
     * @param {GeneratorDeleteArgs} args - Arguments to delete one Generator.
     * @example
     * // Delete one Generator
     * const Generator = await prisma.generator.delete({
     *   where: {
     *     // ... filter to delete one Generator
     *   }
     * })
     * 
    **/
    delete<T extends GeneratorDeleteArgs>(
      args: SelectSubset<T, GeneratorDeleteArgs>
    ): CheckSelect<T, Prisma__GeneratorClient<Generator>, Prisma__GeneratorClient<GeneratorGetPayload<T>>>

    /**
     * Update one Generator.
     * @param {GeneratorUpdateArgs} args - Arguments to update one Generator.
     * @example
     * // Update one Generator
     * const generator = await prisma.generator.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GeneratorUpdateArgs>(
      args: SelectSubset<T, GeneratorUpdateArgs>
    ): CheckSelect<T, Prisma__GeneratorClient<Generator>, Prisma__GeneratorClient<GeneratorGetPayload<T>>>

    /**
     * Delete zero or more Generators.
     * @param {GeneratorDeleteManyArgs} args - Arguments to filter Generators to delete.
     * @example
     * // Delete a few Generators
     * const { count } = await prisma.generator.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GeneratorDeleteManyArgs>(
      args?: SelectSubset<T, GeneratorDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Generators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Generators
     * const generator = await prisma.generator.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GeneratorUpdateManyArgs>(
      args: SelectSubset<T, GeneratorUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Generator.
     * @param {GeneratorUpsertArgs} args - Arguments to update or create a Generator.
     * @example
     * // Update or create a Generator
     * const generator = await prisma.generator.upsert({
     *   create: {
     *     // ... data to create a Generator
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Generator we want to update
     *   }
     * })
    **/
    upsert<T extends GeneratorUpsertArgs>(
      args: SelectSubset<T, GeneratorUpsertArgs>
    ): CheckSelect<T, Prisma__GeneratorClient<Generator>, Prisma__GeneratorClient<GeneratorGetPayload<T>>>

    /**
     * Count the number of Generators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratorCountArgs} args - Arguments to filter Generators to count.
     * @example
     * // Count the number of Generators
     * const count = await prisma.generator.count({
     *   where: {
     *     // ... the filter for the Generators we want to count
     *   }
     * })
    **/
    count<T extends GeneratorCountArgs>(
      args?: Subset<T, GeneratorCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GeneratorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Generator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GeneratorAggregateArgs>(args: Subset<T, GeneratorAggregateArgs>): PrismaPromise<GetGeneratorAggregateType<T>>

    /**
     * Group by Generator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GeneratorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GeneratorGroupByArgs['orderBy'] }
        : { orderBy?: GeneratorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GeneratorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGeneratorGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Generator.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GeneratorClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    cardFront<T extends GeneratorPairArgs = {}>(args?: Subset<T, GeneratorPairArgs>): CheckSelect<T, Prisma__GeneratorPairClient<GeneratorPair | null >, Prisma__GeneratorPairClient<GeneratorPairGetPayload<T> | null >>;

    cardBack<T extends GeneratorPairArgs = {}>(args?: Subset<T, GeneratorPairArgs>): CheckSelect<T, Prisma__GeneratorPairClient<GeneratorPair | null >, Prisma__GeneratorPairClient<GeneratorPairGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Generator findUnique
   */
  export type GeneratorFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Generator
     * 
    **/
    select?: GeneratorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GeneratorInclude | null
    /**
     * Throw an Error if a Generator can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Generator to fetch.
     * 
    **/
    where: GeneratorWhereUniqueInput
  }


  /**
   * Generator findFirst
   */
  export type GeneratorFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Generator
     * 
    **/
    select?: GeneratorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GeneratorInclude | null
    /**
     * Throw an Error if a Generator can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Generator to fetch.
     * 
    **/
    where?: GeneratorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Generators to fetch.
     * 
    **/
    orderBy?: Enumerable<GeneratorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Generators.
     * 
    **/
    cursor?: GeneratorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Generators from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Generators.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Generators.
     * 
    **/
    distinct?: Enumerable<GeneratorScalarFieldEnum>
  }


  /**
   * Generator findMany
   */
  export type GeneratorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Generator
     * 
    **/
    select?: GeneratorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GeneratorInclude | null
    /**
     * Filter, which Generators to fetch.
     * 
    **/
    where?: GeneratorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Generators to fetch.
     * 
    **/
    orderBy?: Enumerable<GeneratorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Generators.
     * 
    **/
    cursor?: GeneratorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Generators from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Generators.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GeneratorScalarFieldEnum>
  }


  /**
   * Generator create
   */
  export type GeneratorCreateArgs = {
    /**
     * Select specific fields to fetch from the Generator
     * 
    **/
    select?: GeneratorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GeneratorInclude | null
    /**
     * The data needed to create a Generator.
     * 
    **/
    data: XOR<GeneratorCreateInput, GeneratorUncheckedCreateInput>
  }


  /**
   * Generator createMany
   */
  export type GeneratorCreateManyArgs = {
    data: Enumerable<GeneratorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Generator update
   */
  export type GeneratorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Generator
     * 
    **/
    select?: GeneratorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GeneratorInclude | null
    /**
     * The data needed to update a Generator.
     * 
    **/
    data: XOR<GeneratorUpdateInput, GeneratorUncheckedUpdateInput>
    /**
     * Choose, which Generator to update.
     * 
    **/
    where: GeneratorWhereUniqueInput
  }


  /**
   * Generator updateMany
   */
  export type GeneratorUpdateManyArgs = {
    data: XOR<GeneratorUpdateManyMutationInput, GeneratorUncheckedUpdateManyInput>
    where?: GeneratorWhereInput
  }


  /**
   * Generator upsert
   */
  export type GeneratorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Generator
     * 
    **/
    select?: GeneratorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GeneratorInclude | null
    /**
     * The filter to search for the Generator to update in case it exists.
     * 
    **/
    where: GeneratorWhereUniqueInput
    /**
     * In case the Generator found by the `where` argument doesn't exist, create a new Generator with this data.
     * 
    **/
    create: XOR<GeneratorCreateInput, GeneratorUncheckedCreateInput>
    /**
     * In case the Generator was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GeneratorUpdateInput, GeneratorUncheckedUpdateInput>
  }


  /**
   * Generator delete
   */
  export type GeneratorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Generator
     * 
    **/
    select?: GeneratorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GeneratorInclude | null
    /**
     * Filter which Generator to delete.
     * 
    **/
    where: GeneratorWhereUniqueInput
  }


  /**
   * Generator deleteMany
   */
  export type GeneratorDeleteManyArgs = {
    where?: GeneratorWhereInput
  }


  /**
   * Generator without action
   */
  export type GeneratorArgs = {
    /**
     * Select specific fields to fetch from the Generator
     * 
    **/
    select?: GeneratorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GeneratorInclude | null
  }



  /**
   * Model ThrusterPair
   */


  export type AggregateThrusterPair = {
    _count: ThrusterPairCountAggregateOutputType | null
    _avg: ThrusterPairAvgAggregateOutputType | null
    _sum: ThrusterPairSumAggregateOutputType | null
    _min: ThrusterPairMinAggregateOutputType | null
    _max: ThrusterPairMaxAggregateOutputType | null
  }

  export type ThrusterPairAvgAggregateOutputType = {
    id: number | null
    frontId: number | null
    backId: number | null
  }

  export type ThrusterPairSumAggregateOutputType = {
    id: number | null
    frontId: number | null
    backId: number | null
  }

  export type ThrusterPairMinAggregateOutputType = {
    id: number | null
    frontId: number | null
    backId: number | null
  }

  export type ThrusterPairMaxAggregateOutputType = {
    id: number | null
    frontId: number | null
    backId: number | null
  }

  export type ThrusterPairCountAggregateOutputType = {
    id: number
    frontId: number
    backId: number
    _all: number
  }


  export type ThrusterPairAvgAggregateInputType = {
    id?: true
    frontId?: true
    backId?: true
  }

  export type ThrusterPairSumAggregateInputType = {
    id?: true
    frontId?: true
    backId?: true
  }

  export type ThrusterPairMinAggregateInputType = {
    id?: true
    frontId?: true
    backId?: true
  }

  export type ThrusterPairMaxAggregateInputType = {
    id?: true
    frontId?: true
    backId?: true
  }

  export type ThrusterPairCountAggregateInputType = {
    id?: true
    frontId?: true
    backId?: true
    _all?: true
  }

  export type ThrusterPairAggregateArgs = {
    /**
     * Filter which ThrusterPair to aggregate.
     * 
    **/
    where?: ThrusterPairWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThrusterPairs to fetch.
     * 
    **/
    orderBy?: Enumerable<ThrusterPairOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ThrusterPairWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThrusterPairs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThrusterPairs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ThrusterPairs
    **/
    _count?: true | ThrusterPairCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThrusterPairAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThrusterPairSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThrusterPairMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThrusterPairMaxAggregateInputType
  }

  export type GetThrusterPairAggregateType<T extends ThrusterPairAggregateArgs> = {
        [P in keyof T & keyof AggregateThrusterPair]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThrusterPair[P]>
      : GetScalarType<T[P], AggregateThrusterPair[P]>
  }




  export type ThrusterPairGroupByArgs = {
    where?: ThrusterPairWhereInput
    orderBy?: Enumerable<ThrusterPairOrderByWithAggregationInput>
    by: Array<ThrusterPairScalarFieldEnum>
    having?: ThrusterPairScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThrusterPairCountAggregateInputType | true
    _avg?: ThrusterPairAvgAggregateInputType
    _sum?: ThrusterPairSumAggregateInputType
    _min?: ThrusterPairMinAggregateInputType
    _max?: ThrusterPairMaxAggregateInputType
  }


  export type ThrusterPairGroupByOutputType = {
    id: number
    frontId: number
    backId: number
    _count: ThrusterPairCountAggregateOutputType | null
    _avg: ThrusterPairAvgAggregateOutputType | null
    _sum: ThrusterPairSumAggregateOutputType | null
    _min: ThrusterPairMinAggregateOutputType | null
    _max: ThrusterPairMaxAggregateOutputType | null
  }

  type GetThrusterPairGroupByPayload<T extends ThrusterPairGroupByArgs> = Promise<
    Array<
      PickArray<ThrusterPairGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThrusterPairGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThrusterPairGroupByOutputType[P]>
            : GetScalarType<T[P], ThrusterPairGroupByOutputType[P]>
        }
      >
    >


  export type ThrusterPairSelect = {
    id?: boolean
    frontId?: boolean
    backId?: boolean
    front?: boolean | ThrusterArgs
    back?: boolean | ThrusterArgs
  }

  export type ThrusterPairInclude = {
    front?: boolean | ThrusterArgs
    back?: boolean | ThrusterArgs
  }

  export type ThrusterPairGetPayload<
    S extends boolean | null | undefined | ThrusterPairArgs,
    U = keyof S
      > = S extends true
        ? ThrusterPair
    : S extends undefined
    ? never
    : S extends ThrusterPairArgs | ThrusterPairFindManyArgs
    ?'include' extends U
    ? ThrusterPair  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'front'
        ? ThrusterGetPayload<S['include'][P]> :
        P extends 'back'
        ? ThrusterGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ThrusterPair ?ThrusterPair [P]
  : 
          P extends 'front'
        ? ThrusterGetPayload<S['select'][P]> :
        P extends 'back'
        ? ThrusterGetPayload<S['select'][P]> : never
  } 
    : ThrusterPair
  : ThrusterPair


  type ThrusterPairCountArgs = Merge<
    Omit<ThrusterPairFindManyArgs, 'select' | 'include'> & {
      select?: ThrusterPairCountAggregateInputType | true
    }
  >

  export interface ThrusterPairDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ThrusterPair that matches the filter.
     * @param {ThrusterPairFindUniqueArgs} args - Arguments to find a ThrusterPair
     * @example
     * // Get one ThrusterPair
     * const thrusterPair = await prisma.thrusterPair.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ThrusterPairFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ThrusterPairFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ThrusterPair'> extends True ? CheckSelect<T, Prisma__ThrusterPairClient<ThrusterPair>, Prisma__ThrusterPairClient<ThrusterPairGetPayload<T>>> : CheckSelect<T, Prisma__ThrusterPairClient<ThrusterPair | null >, Prisma__ThrusterPairClient<ThrusterPairGetPayload<T> | null >>

    /**
     * Find the first ThrusterPair that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThrusterPairFindFirstArgs} args - Arguments to find a ThrusterPair
     * @example
     * // Get one ThrusterPair
     * const thrusterPair = await prisma.thrusterPair.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ThrusterPairFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ThrusterPairFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ThrusterPair'> extends True ? CheckSelect<T, Prisma__ThrusterPairClient<ThrusterPair>, Prisma__ThrusterPairClient<ThrusterPairGetPayload<T>>> : CheckSelect<T, Prisma__ThrusterPairClient<ThrusterPair | null >, Prisma__ThrusterPairClient<ThrusterPairGetPayload<T> | null >>

    /**
     * Find zero or more ThrusterPairs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThrusterPairFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ThrusterPairs
     * const thrusterPairs = await prisma.thrusterPair.findMany()
     * 
     * // Get first 10 ThrusterPairs
     * const thrusterPairs = await prisma.thrusterPair.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const thrusterPairWithIdOnly = await prisma.thrusterPair.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ThrusterPairFindManyArgs>(
      args?: SelectSubset<T, ThrusterPairFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ThrusterPair>>, PrismaPromise<Array<ThrusterPairGetPayload<T>>>>

    /**
     * Create a ThrusterPair.
     * @param {ThrusterPairCreateArgs} args - Arguments to create a ThrusterPair.
     * @example
     * // Create one ThrusterPair
     * const ThrusterPair = await prisma.thrusterPair.create({
     *   data: {
     *     // ... data to create a ThrusterPair
     *   }
     * })
     * 
    **/
    create<T extends ThrusterPairCreateArgs>(
      args: SelectSubset<T, ThrusterPairCreateArgs>
    ): CheckSelect<T, Prisma__ThrusterPairClient<ThrusterPair>, Prisma__ThrusterPairClient<ThrusterPairGetPayload<T>>>

    /**
     * Create many ThrusterPairs.
     *     @param {ThrusterPairCreateManyArgs} args - Arguments to create many ThrusterPairs.
     *     @example
     *     // Create many ThrusterPairs
     *     const thrusterPair = await prisma.thrusterPair.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ThrusterPairCreateManyArgs>(
      args?: SelectSubset<T, ThrusterPairCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ThrusterPair.
     * @param {ThrusterPairDeleteArgs} args - Arguments to delete one ThrusterPair.
     * @example
     * // Delete one ThrusterPair
     * const ThrusterPair = await prisma.thrusterPair.delete({
     *   where: {
     *     // ... filter to delete one ThrusterPair
     *   }
     * })
     * 
    **/
    delete<T extends ThrusterPairDeleteArgs>(
      args: SelectSubset<T, ThrusterPairDeleteArgs>
    ): CheckSelect<T, Prisma__ThrusterPairClient<ThrusterPair>, Prisma__ThrusterPairClient<ThrusterPairGetPayload<T>>>

    /**
     * Update one ThrusterPair.
     * @param {ThrusterPairUpdateArgs} args - Arguments to update one ThrusterPair.
     * @example
     * // Update one ThrusterPair
     * const thrusterPair = await prisma.thrusterPair.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ThrusterPairUpdateArgs>(
      args: SelectSubset<T, ThrusterPairUpdateArgs>
    ): CheckSelect<T, Prisma__ThrusterPairClient<ThrusterPair>, Prisma__ThrusterPairClient<ThrusterPairGetPayload<T>>>

    /**
     * Delete zero or more ThrusterPairs.
     * @param {ThrusterPairDeleteManyArgs} args - Arguments to filter ThrusterPairs to delete.
     * @example
     * // Delete a few ThrusterPairs
     * const { count } = await prisma.thrusterPair.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ThrusterPairDeleteManyArgs>(
      args?: SelectSubset<T, ThrusterPairDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ThrusterPairs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThrusterPairUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ThrusterPairs
     * const thrusterPair = await prisma.thrusterPair.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ThrusterPairUpdateManyArgs>(
      args: SelectSubset<T, ThrusterPairUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ThrusterPair.
     * @param {ThrusterPairUpsertArgs} args - Arguments to update or create a ThrusterPair.
     * @example
     * // Update or create a ThrusterPair
     * const thrusterPair = await prisma.thrusterPair.upsert({
     *   create: {
     *     // ... data to create a ThrusterPair
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ThrusterPair we want to update
     *   }
     * })
    **/
    upsert<T extends ThrusterPairUpsertArgs>(
      args: SelectSubset<T, ThrusterPairUpsertArgs>
    ): CheckSelect<T, Prisma__ThrusterPairClient<ThrusterPair>, Prisma__ThrusterPairClient<ThrusterPairGetPayload<T>>>

    /**
     * Count the number of ThrusterPairs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThrusterPairCountArgs} args - Arguments to filter ThrusterPairs to count.
     * @example
     * // Count the number of ThrusterPairs
     * const count = await prisma.thrusterPair.count({
     *   where: {
     *     // ... the filter for the ThrusterPairs we want to count
     *   }
     * })
    **/
    count<T extends ThrusterPairCountArgs>(
      args?: Subset<T, ThrusterPairCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThrusterPairCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ThrusterPair.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThrusterPairAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThrusterPairAggregateArgs>(args: Subset<T, ThrusterPairAggregateArgs>): PrismaPromise<GetThrusterPairAggregateType<T>>

    /**
     * Group by ThrusterPair.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThrusterPairGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThrusterPairGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThrusterPairGroupByArgs['orderBy'] }
        : { orderBy?: ThrusterPairGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThrusterPairGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThrusterPairGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ThrusterPair.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ThrusterPairClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    front<T extends ThrusterArgs = {}>(args?: Subset<T, ThrusterArgs>): CheckSelect<T, Prisma__ThrusterClient<Thruster | null >, Prisma__ThrusterClient<ThrusterGetPayload<T> | null >>;

    back<T extends ThrusterArgs = {}>(args?: Subset<T, ThrusterArgs>): CheckSelect<T, Prisma__ThrusterClient<Thruster | null >, Prisma__ThrusterClient<ThrusterGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ThrusterPair findUnique
   */
  export type ThrusterPairFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ThrusterPair
     * 
    **/
    select?: ThrusterPairSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThrusterPairInclude | null
    /**
     * Throw an Error if a ThrusterPair can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ThrusterPair to fetch.
     * 
    **/
    where: ThrusterPairWhereUniqueInput
  }


  /**
   * ThrusterPair findFirst
   */
  export type ThrusterPairFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ThrusterPair
     * 
    **/
    select?: ThrusterPairSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThrusterPairInclude | null
    /**
     * Throw an Error if a ThrusterPair can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ThrusterPair to fetch.
     * 
    **/
    where?: ThrusterPairWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThrusterPairs to fetch.
     * 
    **/
    orderBy?: Enumerable<ThrusterPairOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThrusterPairs.
     * 
    **/
    cursor?: ThrusterPairWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThrusterPairs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThrusterPairs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThrusterPairs.
     * 
    **/
    distinct?: Enumerable<ThrusterPairScalarFieldEnum>
  }


  /**
   * ThrusterPair findMany
   */
  export type ThrusterPairFindManyArgs = {
    /**
     * Select specific fields to fetch from the ThrusterPair
     * 
    **/
    select?: ThrusterPairSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThrusterPairInclude | null
    /**
     * Filter, which ThrusterPairs to fetch.
     * 
    **/
    where?: ThrusterPairWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThrusterPairs to fetch.
     * 
    **/
    orderBy?: Enumerable<ThrusterPairOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ThrusterPairs.
     * 
    **/
    cursor?: ThrusterPairWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThrusterPairs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThrusterPairs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ThrusterPairScalarFieldEnum>
  }


  /**
   * ThrusterPair create
   */
  export type ThrusterPairCreateArgs = {
    /**
     * Select specific fields to fetch from the ThrusterPair
     * 
    **/
    select?: ThrusterPairSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThrusterPairInclude | null
    /**
     * The data needed to create a ThrusterPair.
     * 
    **/
    data: XOR<ThrusterPairCreateInput, ThrusterPairUncheckedCreateInput>
  }


  /**
   * ThrusterPair createMany
   */
  export type ThrusterPairCreateManyArgs = {
    data: Enumerable<ThrusterPairCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ThrusterPair update
   */
  export type ThrusterPairUpdateArgs = {
    /**
     * Select specific fields to fetch from the ThrusterPair
     * 
    **/
    select?: ThrusterPairSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThrusterPairInclude | null
    /**
     * The data needed to update a ThrusterPair.
     * 
    **/
    data: XOR<ThrusterPairUpdateInput, ThrusterPairUncheckedUpdateInput>
    /**
     * Choose, which ThrusterPair to update.
     * 
    **/
    where: ThrusterPairWhereUniqueInput
  }


  /**
   * ThrusterPair updateMany
   */
  export type ThrusterPairUpdateManyArgs = {
    data: XOR<ThrusterPairUpdateManyMutationInput, ThrusterPairUncheckedUpdateManyInput>
    where?: ThrusterPairWhereInput
  }


  /**
   * ThrusterPair upsert
   */
  export type ThrusterPairUpsertArgs = {
    /**
     * Select specific fields to fetch from the ThrusterPair
     * 
    **/
    select?: ThrusterPairSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThrusterPairInclude | null
    /**
     * The filter to search for the ThrusterPair to update in case it exists.
     * 
    **/
    where: ThrusterPairWhereUniqueInput
    /**
     * In case the ThrusterPair found by the `where` argument doesn't exist, create a new ThrusterPair with this data.
     * 
    **/
    create: XOR<ThrusterPairCreateInput, ThrusterPairUncheckedCreateInput>
    /**
     * In case the ThrusterPair was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ThrusterPairUpdateInput, ThrusterPairUncheckedUpdateInput>
  }


  /**
   * ThrusterPair delete
   */
  export type ThrusterPairDeleteArgs = {
    /**
     * Select specific fields to fetch from the ThrusterPair
     * 
    **/
    select?: ThrusterPairSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThrusterPairInclude | null
    /**
     * Filter which ThrusterPair to delete.
     * 
    **/
    where: ThrusterPairWhereUniqueInput
  }


  /**
   * ThrusterPair deleteMany
   */
  export type ThrusterPairDeleteManyArgs = {
    where?: ThrusterPairWhereInput
  }


  /**
   * ThrusterPair without action
   */
  export type ThrusterPairArgs = {
    /**
     * Select specific fields to fetch from the ThrusterPair
     * 
    **/
    select?: ThrusterPairSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThrusterPairInclude | null
  }



  /**
   * Model Thruster
   */


  export type AggregateThruster = {
    _count: ThrusterCountAggregateOutputType | null
    _avg: ThrusterAvgAggregateOutputType | null
    _sum: ThrusterSumAggregateOutputType | null
    _min: ThrusterMinAggregateOutputType | null
    _max: ThrusterMaxAggregateOutputType | null
  }

  export type ThrusterAvgAggregateOutputType = {
    id: number | null
    mass: number | null
    radHard: number | null
    thrust: number | null
    fuelConsumption: number | null
    afterBurn: number | null
    powersatBonus: number | null
    coolingReq: number | null
  }

  export type ThrusterSumAggregateOutputType = {
    id: number | null
    mass: number | null
    radHard: number | null
    thrust: number | null
    fuelConsumption: number | null
    afterBurn: number | null
    powersatBonus: number | null
    coolingReq: number | null
  }

  export type ThrusterMinAggregateOutputType = {
    id: number | null
    name: string | null
    mass: number | null
    radHard: number | null
    spectralClass: SpectralClass | null
    fuelType: FuelType | null
    thrust: number | null
    fuelConsumption: number | null
    afterBurn: number | null
    powersatBonus: number | null
    coolingReq: number | null
  }

  export type ThrusterMaxAggregateOutputType = {
    id: number | null
    name: string | null
    mass: number | null
    radHard: number | null
    spectralClass: SpectralClass | null
    fuelType: FuelType | null
    thrust: number | null
    fuelConsumption: number | null
    afterBurn: number | null
    powersatBonus: number | null
    coolingReq: number | null
  }

  export type ThrusterCountAggregateOutputType = {
    id: number
    name: number
    mass: number
    radHard: number
    spectralClass: number
    fuelType: number
    thrust: number
    fuelConsumption: number
    afterBurn: number
    powersatBonus: number
    abilities: number
    coolingReq: number
    generatorReq: number
    ReactorReq: number
    _all: number
  }


  export type ThrusterAvgAggregateInputType = {
    id?: true
    mass?: true
    radHard?: true
    thrust?: true
    fuelConsumption?: true
    afterBurn?: true
    powersatBonus?: true
    coolingReq?: true
  }

  export type ThrusterSumAggregateInputType = {
    id?: true
    mass?: true
    radHard?: true
    thrust?: true
    fuelConsumption?: true
    afterBurn?: true
    powersatBonus?: true
    coolingReq?: true
  }

  export type ThrusterMinAggregateInputType = {
    id?: true
    name?: true
    mass?: true
    radHard?: true
    spectralClass?: true
    fuelType?: true
    thrust?: true
    fuelConsumption?: true
    afterBurn?: true
    powersatBonus?: true
    coolingReq?: true
  }

  export type ThrusterMaxAggregateInputType = {
    id?: true
    name?: true
    mass?: true
    radHard?: true
    spectralClass?: true
    fuelType?: true
    thrust?: true
    fuelConsumption?: true
    afterBurn?: true
    powersatBonus?: true
    coolingReq?: true
  }

  export type ThrusterCountAggregateInputType = {
    id?: true
    name?: true
    mass?: true
    radHard?: true
    spectralClass?: true
    fuelType?: true
    thrust?: true
    fuelConsumption?: true
    afterBurn?: true
    powersatBonus?: true
    abilities?: true
    coolingReq?: true
    generatorReq?: true
    ReactorReq?: true
    _all?: true
  }

  export type ThrusterAggregateArgs = {
    /**
     * Filter which Thruster to aggregate.
     * 
    **/
    where?: ThrusterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Thrusters to fetch.
     * 
    **/
    orderBy?: Enumerable<ThrusterOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ThrusterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Thrusters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Thrusters.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Thrusters
    **/
    _count?: true | ThrusterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThrusterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThrusterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThrusterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThrusterMaxAggregateInputType
  }

  export type GetThrusterAggregateType<T extends ThrusterAggregateArgs> = {
        [P in keyof T & keyof AggregateThruster]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThruster[P]>
      : GetScalarType<T[P], AggregateThruster[P]>
  }




  export type ThrusterGroupByArgs = {
    where?: ThrusterWhereInput
    orderBy?: Enumerable<ThrusterOrderByWithAggregationInput>
    by: Array<ThrusterScalarFieldEnum>
    having?: ThrusterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThrusterCountAggregateInputType | true
    _avg?: ThrusterAvgAggregateInputType
    _sum?: ThrusterSumAggregateInputType
    _min?: ThrusterMinAggregateInputType
    _max?: ThrusterMaxAggregateInputType
  }


  export type ThrusterGroupByOutputType = {
    id: number
    name: string
    mass: number
    radHard: number
    spectralClass: SpectralClass
    fuelType: FuelType
    thrust: number
    fuelConsumption: number
    afterBurn: number
    powersatBonus: number | null
    abilities: Abilities[]
    coolingReq: number
    generatorReq: GeneratorTech[]
    ReactorReq: ReactorTech[]
    _count: ThrusterCountAggregateOutputType | null
    _avg: ThrusterAvgAggregateOutputType | null
    _sum: ThrusterSumAggregateOutputType | null
    _min: ThrusterMinAggregateOutputType | null
    _max: ThrusterMaxAggregateOutputType | null
  }

  type GetThrusterGroupByPayload<T extends ThrusterGroupByArgs> = Promise<
    Array<
      PickArray<ThrusterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThrusterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThrusterGroupByOutputType[P]>
            : GetScalarType<T[P], ThrusterGroupByOutputType[P]>
        }
      >
    >


  export type ThrusterSelect = {
    id?: boolean
    name?: boolean
    mass?: boolean
    radHard?: boolean
    spectralClass?: boolean
    fuelType?: boolean
    thrust?: boolean
    fuelConsumption?: boolean
    afterBurn?: boolean
    powersatBonus?: boolean
    abilities?: boolean
    coolingReq?: boolean
    generatorReq?: boolean
    ReactorReq?: boolean
    cardFront?: boolean | ThrusterPairArgs
    cardBack?: boolean | ThrusterPairArgs
  }

  export type ThrusterInclude = {
    cardFront?: boolean | ThrusterPairArgs
    cardBack?: boolean | ThrusterPairArgs
  }

  export type ThrusterGetPayload<
    S extends boolean | null | undefined | ThrusterArgs,
    U = keyof S
      > = S extends true
        ? Thruster
    : S extends undefined
    ? never
    : S extends ThrusterArgs | ThrusterFindManyArgs
    ?'include' extends U
    ? Thruster  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'cardFront'
        ? ThrusterPairGetPayload<S['include'][P]> | null :
        P extends 'cardBack'
        ? ThrusterPairGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Thruster ?Thruster [P]
  : 
          P extends 'cardFront'
        ? ThrusterPairGetPayload<S['select'][P]> | null :
        P extends 'cardBack'
        ? ThrusterPairGetPayload<S['select'][P]> | null : never
  } 
    : Thruster
  : Thruster


  type ThrusterCountArgs = Merge<
    Omit<ThrusterFindManyArgs, 'select' | 'include'> & {
      select?: ThrusterCountAggregateInputType | true
    }
  >

  export interface ThrusterDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Thruster that matches the filter.
     * @param {ThrusterFindUniqueArgs} args - Arguments to find a Thruster
     * @example
     * // Get one Thruster
     * const thruster = await prisma.thruster.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ThrusterFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ThrusterFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Thruster'> extends True ? CheckSelect<T, Prisma__ThrusterClient<Thruster>, Prisma__ThrusterClient<ThrusterGetPayload<T>>> : CheckSelect<T, Prisma__ThrusterClient<Thruster | null >, Prisma__ThrusterClient<ThrusterGetPayload<T> | null >>

    /**
     * Find the first Thruster that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThrusterFindFirstArgs} args - Arguments to find a Thruster
     * @example
     * // Get one Thruster
     * const thruster = await prisma.thruster.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ThrusterFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ThrusterFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Thruster'> extends True ? CheckSelect<T, Prisma__ThrusterClient<Thruster>, Prisma__ThrusterClient<ThrusterGetPayload<T>>> : CheckSelect<T, Prisma__ThrusterClient<Thruster | null >, Prisma__ThrusterClient<ThrusterGetPayload<T> | null >>

    /**
     * Find zero or more Thrusters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThrusterFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Thrusters
     * const thrusters = await prisma.thruster.findMany()
     * 
     * // Get first 10 Thrusters
     * const thrusters = await prisma.thruster.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const thrusterWithIdOnly = await prisma.thruster.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ThrusterFindManyArgs>(
      args?: SelectSubset<T, ThrusterFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Thruster>>, PrismaPromise<Array<ThrusterGetPayload<T>>>>

    /**
     * Create a Thruster.
     * @param {ThrusterCreateArgs} args - Arguments to create a Thruster.
     * @example
     * // Create one Thruster
     * const Thruster = await prisma.thruster.create({
     *   data: {
     *     // ... data to create a Thruster
     *   }
     * })
     * 
    **/
    create<T extends ThrusterCreateArgs>(
      args: SelectSubset<T, ThrusterCreateArgs>
    ): CheckSelect<T, Prisma__ThrusterClient<Thruster>, Prisma__ThrusterClient<ThrusterGetPayload<T>>>

    /**
     * Create many Thrusters.
     *     @param {ThrusterCreateManyArgs} args - Arguments to create many Thrusters.
     *     @example
     *     // Create many Thrusters
     *     const thruster = await prisma.thruster.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ThrusterCreateManyArgs>(
      args?: SelectSubset<T, ThrusterCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Thruster.
     * @param {ThrusterDeleteArgs} args - Arguments to delete one Thruster.
     * @example
     * // Delete one Thruster
     * const Thruster = await prisma.thruster.delete({
     *   where: {
     *     // ... filter to delete one Thruster
     *   }
     * })
     * 
    **/
    delete<T extends ThrusterDeleteArgs>(
      args: SelectSubset<T, ThrusterDeleteArgs>
    ): CheckSelect<T, Prisma__ThrusterClient<Thruster>, Prisma__ThrusterClient<ThrusterGetPayload<T>>>

    /**
     * Update one Thruster.
     * @param {ThrusterUpdateArgs} args - Arguments to update one Thruster.
     * @example
     * // Update one Thruster
     * const thruster = await prisma.thruster.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ThrusterUpdateArgs>(
      args: SelectSubset<T, ThrusterUpdateArgs>
    ): CheckSelect<T, Prisma__ThrusterClient<Thruster>, Prisma__ThrusterClient<ThrusterGetPayload<T>>>

    /**
     * Delete zero or more Thrusters.
     * @param {ThrusterDeleteManyArgs} args - Arguments to filter Thrusters to delete.
     * @example
     * // Delete a few Thrusters
     * const { count } = await prisma.thruster.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ThrusterDeleteManyArgs>(
      args?: SelectSubset<T, ThrusterDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Thrusters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThrusterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Thrusters
     * const thruster = await prisma.thruster.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ThrusterUpdateManyArgs>(
      args: SelectSubset<T, ThrusterUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Thruster.
     * @param {ThrusterUpsertArgs} args - Arguments to update or create a Thruster.
     * @example
     * // Update or create a Thruster
     * const thruster = await prisma.thruster.upsert({
     *   create: {
     *     // ... data to create a Thruster
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Thruster we want to update
     *   }
     * })
    **/
    upsert<T extends ThrusterUpsertArgs>(
      args: SelectSubset<T, ThrusterUpsertArgs>
    ): CheckSelect<T, Prisma__ThrusterClient<Thruster>, Prisma__ThrusterClient<ThrusterGetPayload<T>>>

    /**
     * Count the number of Thrusters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThrusterCountArgs} args - Arguments to filter Thrusters to count.
     * @example
     * // Count the number of Thrusters
     * const count = await prisma.thruster.count({
     *   where: {
     *     // ... the filter for the Thrusters we want to count
     *   }
     * })
    **/
    count<T extends ThrusterCountArgs>(
      args?: Subset<T, ThrusterCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThrusterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Thruster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThrusterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThrusterAggregateArgs>(args: Subset<T, ThrusterAggregateArgs>): PrismaPromise<GetThrusterAggregateType<T>>

    /**
     * Group by Thruster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThrusterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThrusterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThrusterGroupByArgs['orderBy'] }
        : { orderBy?: ThrusterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThrusterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThrusterGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Thruster.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ThrusterClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    cardFront<T extends ThrusterPairArgs = {}>(args?: Subset<T, ThrusterPairArgs>): CheckSelect<T, Prisma__ThrusterPairClient<ThrusterPair | null >, Prisma__ThrusterPairClient<ThrusterPairGetPayload<T> | null >>;

    cardBack<T extends ThrusterPairArgs = {}>(args?: Subset<T, ThrusterPairArgs>): CheckSelect<T, Prisma__ThrusterPairClient<ThrusterPair | null >, Prisma__ThrusterPairClient<ThrusterPairGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Thruster findUnique
   */
  export type ThrusterFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Thruster
     * 
    **/
    select?: ThrusterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThrusterInclude | null
    /**
     * Throw an Error if a Thruster can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Thruster to fetch.
     * 
    **/
    where: ThrusterWhereUniqueInput
  }


  /**
   * Thruster findFirst
   */
  export type ThrusterFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Thruster
     * 
    **/
    select?: ThrusterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThrusterInclude | null
    /**
     * Throw an Error if a Thruster can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Thruster to fetch.
     * 
    **/
    where?: ThrusterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Thrusters to fetch.
     * 
    **/
    orderBy?: Enumerable<ThrusterOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Thrusters.
     * 
    **/
    cursor?: ThrusterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Thrusters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Thrusters.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Thrusters.
     * 
    **/
    distinct?: Enumerable<ThrusterScalarFieldEnum>
  }


  /**
   * Thruster findMany
   */
  export type ThrusterFindManyArgs = {
    /**
     * Select specific fields to fetch from the Thruster
     * 
    **/
    select?: ThrusterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThrusterInclude | null
    /**
     * Filter, which Thrusters to fetch.
     * 
    **/
    where?: ThrusterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Thrusters to fetch.
     * 
    **/
    orderBy?: Enumerable<ThrusterOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Thrusters.
     * 
    **/
    cursor?: ThrusterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Thrusters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Thrusters.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ThrusterScalarFieldEnum>
  }


  /**
   * Thruster create
   */
  export type ThrusterCreateArgs = {
    /**
     * Select specific fields to fetch from the Thruster
     * 
    **/
    select?: ThrusterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThrusterInclude | null
    /**
     * The data needed to create a Thruster.
     * 
    **/
    data: XOR<ThrusterCreateInput, ThrusterUncheckedCreateInput>
  }


  /**
   * Thruster createMany
   */
  export type ThrusterCreateManyArgs = {
    data: Enumerable<ThrusterCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Thruster update
   */
  export type ThrusterUpdateArgs = {
    /**
     * Select specific fields to fetch from the Thruster
     * 
    **/
    select?: ThrusterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThrusterInclude | null
    /**
     * The data needed to update a Thruster.
     * 
    **/
    data: XOR<ThrusterUpdateInput, ThrusterUncheckedUpdateInput>
    /**
     * Choose, which Thruster to update.
     * 
    **/
    where: ThrusterWhereUniqueInput
  }


  /**
   * Thruster updateMany
   */
  export type ThrusterUpdateManyArgs = {
    data: XOR<ThrusterUpdateManyMutationInput, ThrusterUncheckedUpdateManyInput>
    where?: ThrusterWhereInput
  }


  /**
   * Thruster upsert
   */
  export type ThrusterUpsertArgs = {
    /**
     * Select specific fields to fetch from the Thruster
     * 
    **/
    select?: ThrusterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThrusterInclude | null
    /**
     * The filter to search for the Thruster to update in case it exists.
     * 
    **/
    where: ThrusterWhereUniqueInput
    /**
     * In case the Thruster found by the `where` argument doesn't exist, create a new Thruster with this data.
     * 
    **/
    create: XOR<ThrusterCreateInput, ThrusterUncheckedCreateInput>
    /**
     * In case the Thruster was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ThrusterUpdateInput, ThrusterUncheckedUpdateInput>
  }


  /**
   * Thruster delete
   */
  export type ThrusterDeleteArgs = {
    /**
     * Select specific fields to fetch from the Thruster
     * 
    **/
    select?: ThrusterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThrusterInclude | null
    /**
     * Filter which Thruster to delete.
     * 
    **/
    where: ThrusterWhereUniqueInput
  }


  /**
   * Thruster deleteMany
   */
  export type ThrusterDeleteManyArgs = {
    where?: ThrusterWhereInput
  }


  /**
   * Thruster without action
   */
  export type ThrusterArgs = {
    /**
     * Select specific fields to fetch from the Thruster
     * 
    **/
    select?: ThrusterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThrusterInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    email: 'email',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ReactorPairScalarFieldEnum: {
    id: 'id',
    frontId: 'frontId',
    backId: 'backId'
  };

  export type ReactorPairScalarFieldEnum = (typeof ReactorPairScalarFieldEnum)[keyof typeof ReactorPairScalarFieldEnum]


  export const ReactorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    mass: 'mass',
    radHard: 'radHard',
    spectralClass: 'spectralClass',
    techs: 'techs',
    thrustModifier: 'thrustModifier',
    fuelModifier: 'fuelModifier',
    abilities: 'abilities',
    coolingReq: 'coolingReq',
    generatorReq: 'generatorReq',
    ReactorReq: 'ReactorReq'
  };

  export type ReactorScalarFieldEnum = (typeof ReactorScalarFieldEnum)[keyof typeof ReactorScalarFieldEnum]


  export const GeneratorPairScalarFieldEnum: {
    id: 'id',
    frontId: 'frontId',
    backId: 'backId'
  };

  export type GeneratorPairScalarFieldEnum = (typeof GeneratorPairScalarFieldEnum)[keyof typeof GeneratorPairScalarFieldEnum]


  export const GeneratorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    mass: 'mass',
    radHard: 'radHard',
    spectralClass: 'spectralClass',
    techs: 'techs',
    thrustModifier: 'thrustModifier',
    fuelModifier: 'fuelModifier',
    abilities: 'abilities',
    coolingReq: 'coolingReq',
    generatorReq: 'generatorReq',
    ReactorReq: 'ReactorReq'
  };

  export type GeneratorScalarFieldEnum = (typeof GeneratorScalarFieldEnum)[keyof typeof GeneratorScalarFieldEnum]


  export const ThrusterPairScalarFieldEnum: {
    id: 'id',
    frontId: 'frontId',
    backId: 'backId'
  };

  export type ThrusterPairScalarFieldEnum = (typeof ThrusterPairScalarFieldEnum)[keyof typeof ThrusterPairScalarFieldEnum]


  export const ThrusterScalarFieldEnum: {
    id: 'id',
    name: 'name',
    mass: 'mass',
    radHard: 'radHard',
    spectralClass: 'spectralClass',
    fuelType: 'fuelType',
    thrust: 'thrust',
    fuelConsumption: 'fuelConsumption',
    afterBurn: 'afterBurn',
    powersatBonus: 'powersatBonus',
    abilities: 'abilities',
    coolingReq: 'coolingReq',
    generatorReq: 'generatorReq',
    ReactorReq: 'ReactorReq'
  };

  export type ThrusterScalarFieldEnum = (typeof ThrusterScalarFieldEnum)[keyof typeof ThrusterScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    email?: StringFilter | string
    role?: EnumRoleFilter | Role
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    role?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    email?: StringWithAggregatesFilter | string
    role?: EnumRoleWithAggregatesFilter | Role
  }

  export type ReactorPairWhereInput = {
    AND?: Enumerable<ReactorPairWhereInput>
    OR?: Enumerable<ReactorPairWhereInput>
    NOT?: Enumerable<ReactorPairWhereInput>
    id?: IntFilter | number
    frontId?: IntFilter | number
    backId?: IntFilter | number
    front?: XOR<ReactorRelationFilter, ReactorWhereInput>
    back?: XOR<ReactorRelationFilter, ReactorWhereInput>
  }

  export type ReactorPairOrderByWithRelationInput = {
    id?: SortOrder
    frontId?: SortOrder
    backId?: SortOrder
    front?: ReactorOrderByWithRelationInput
    back?: ReactorOrderByWithRelationInput
  }

  export type ReactorPairWhereUniqueInput = {
    id?: number
    frontId?: number
    backId?: number
  }

  export type ReactorPairOrderByWithAggregationInput = {
    id?: SortOrder
    frontId?: SortOrder
    backId?: SortOrder
    _count?: ReactorPairCountOrderByAggregateInput
    _avg?: ReactorPairAvgOrderByAggregateInput
    _max?: ReactorPairMaxOrderByAggregateInput
    _min?: ReactorPairMinOrderByAggregateInput
    _sum?: ReactorPairSumOrderByAggregateInput
  }

  export type ReactorPairScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReactorPairScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReactorPairScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReactorPairScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    frontId?: IntWithAggregatesFilter | number
    backId?: IntWithAggregatesFilter | number
  }

  export type ReactorWhereInput = {
    AND?: Enumerable<ReactorWhereInput>
    OR?: Enumerable<ReactorWhereInput>
    NOT?: Enumerable<ReactorWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    mass?: IntFilter | number
    radHard?: IntFilter | number
    spectralClass?: EnumSpectralClassFilter | SpectralClass
    techs?: EnumGeneratorTechNullableListFilter
    thrustModifier?: IntFilter | number
    fuelModifier?: FloatFilter | number
    abilities?: EnumAbilitiesNullableListFilter
    coolingReq?: IntFilter | number
    generatorReq?: EnumGeneratorTechFilter | GeneratorTech
    ReactorReq?: EnumReactorTechFilter | ReactorTech
    cardFront?: XOR<ReactorPairRelationFilter, ReactorPairWhereInput> | null
    cardBack?: XOR<ReactorPairRelationFilter, ReactorPairWhereInput> | null
  }

  export type ReactorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    mass?: SortOrder
    radHard?: SortOrder
    spectralClass?: SortOrder
    techs?: SortOrder
    thrustModifier?: SortOrder
    fuelModifier?: SortOrder
    abilities?: SortOrder
    coolingReq?: SortOrder
    generatorReq?: SortOrder
    ReactorReq?: SortOrder
    cardFront?: ReactorPairOrderByWithRelationInput
    cardBack?: ReactorPairOrderByWithRelationInput
  }

  export type ReactorWhereUniqueInput = {
    id?: number
  }

  export type ReactorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    mass?: SortOrder
    radHard?: SortOrder
    spectralClass?: SortOrder
    techs?: SortOrder
    thrustModifier?: SortOrder
    fuelModifier?: SortOrder
    abilities?: SortOrder
    coolingReq?: SortOrder
    generatorReq?: SortOrder
    ReactorReq?: SortOrder
    _count?: ReactorCountOrderByAggregateInput
    _avg?: ReactorAvgOrderByAggregateInput
    _max?: ReactorMaxOrderByAggregateInput
    _min?: ReactorMinOrderByAggregateInput
    _sum?: ReactorSumOrderByAggregateInput
  }

  export type ReactorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReactorScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReactorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReactorScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    mass?: IntWithAggregatesFilter | number
    radHard?: IntWithAggregatesFilter | number
    spectralClass?: EnumSpectralClassWithAggregatesFilter | SpectralClass
    techs?: EnumGeneratorTechNullableListFilter
    thrustModifier?: IntWithAggregatesFilter | number
    fuelModifier?: FloatWithAggregatesFilter | number
    abilities?: EnumAbilitiesNullableListFilter
    coolingReq?: IntWithAggregatesFilter | number
    generatorReq?: EnumGeneratorTechWithAggregatesFilter | GeneratorTech
    ReactorReq?: EnumReactorTechWithAggregatesFilter | ReactorTech
  }

  export type GeneratorPairWhereInput = {
    AND?: Enumerable<GeneratorPairWhereInput>
    OR?: Enumerable<GeneratorPairWhereInput>
    NOT?: Enumerable<GeneratorPairWhereInput>
    id?: IntFilter | number
    frontId?: IntFilter | number
    backId?: IntFilter | number
    front?: XOR<GeneratorRelationFilter, GeneratorWhereInput>
    back?: XOR<GeneratorRelationFilter, GeneratorWhereInput>
  }

  export type GeneratorPairOrderByWithRelationInput = {
    id?: SortOrder
    frontId?: SortOrder
    backId?: SortOrder
    front?: GeneratorOrderByWithRelationInput
    back?: GeneratorOrderByWithRelationInput
  }

  export type GeneratorPairWhereUniqueInput = {
    id?: number
    frontId?: number
    backId?: number
  }

  export type GeneratorPairOrderByWithAggregationInput = {
    id?: SortOrder
    frontId?: SortOrder
    backId?: SortOrder
    _count?: GeneratorPairCountOrderByAggregateInput
    _avg?: GeneratorPairAvgOrderByAggregateInput
    _max?: GeneratorPairMaxOrderByAggregateInput
    _min?: GeneratorPairMinOrderByAggregateInput
    _sum?: GeneratorPairSumOrderByAggregateInput
  }

  export type GeneratorPairScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GeneratorPairScalarWhereWithAggregatesInput>
    OR?: Enumerable<GeneratorPairScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GeneratorPairScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    frontId?: IntWithAggregatesFilter | number
    backId?: IntWithAggregatesFilter | number
  }

  export type GeneratorWhereInput = {
    AND?: Enumerable<GeneratorWhereInput>
    OR?: Enumerable<GeneratorWhereInput>
    NOT?: Enumerable<GeneratorWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    mass?: IntFilter | number
    radHard?: IntFilter | number
    spectralClass?: EnumSpectralClassFilter | SpectralClass
    techs?: EnumGeneratorTechNullableListFilter
    thrustModifier?: IntFilter | number
    fuelModifier?: FloatFilter | number
    abilities?: EnumAbilitiesNullableListFilter
    coolingReq?: IntFilter | number
    generatorReq?: EnumGeneratorTechNullableListFilter
    ReactorReq?: EnumReactorTechNullableListFilter
    cardFront?: XOR<GeneratorPairRelationFilter, GeneratorPairWhereInput> | null
    cardBack?: XOR<GeneratorPairRelationFilter, GeneratorPairWhereInput> | null
  }

  export type GeneratorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    mass?: SortOrder
    radHard?: SortOrder
    spectralClass?: SortOrder
    techs?: SortOrder
    thrustModifier?: SortOrder
    fuelModifier?: SortOrder
    abilities?: SortOrder
    coolingReq?: SortOrder
    generatorReq?: SortOrder
    ReactorReq?: SortOrder
    cardFront?: GeneratorPairOrderByWithRelationInput
    cardBack?: GeneratorPairOrderByWithRelationInput
  }

  export type GeneratorWhereUniqueInput = {
    id?: number
  }

  export type GeneratorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    mass?: SortOrder
    radHard?: SortOrder
    spectralClass?: SortOrder
    techs?: SortOrder
    thrustModifier?: SortOrder
    fuelModifier?: SortOrder
    abilities?: SortOrder
    coolingReq?: SortOrder
    generatorReq?: SortOrder
    ReactorReq?: SortOrder
    _count?: GeneratorCountOrderByAggregateInput
    _avg?: GeneratorAvgOrderByAggregateInput
    _max?: GeneratorMaxOrderByAggregateInput
    _min?: GeneratorMinOrderByAggregateInput
    _sum?: GeneratorSumOrderByAggregateInput
  }

  export type GeneratorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GeneratorScalarWhereWithAggregatesInput>
    OR?: Enumerable<GeneratorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GeneratorScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    mass?: IntWithAggregatesFilter | number
    radHard?: IntWithAggregatesFilter | number
    spectralClass?: EnumSpectralClassWithAggregatesFilter | SpectralClass
    techs?: EnumGeneratorTechNullableListFilter
    thrustModifier?: IntWithAggregatesFilter | number
    fuelModifier?: FloatWithAggregatesFilter | number
    abilities?: EnumAbilitiesNullableListFilter
    coolingReq?: IntWithAggregatesFilter | number
    generatorReq?: EnumGeneratorTechNullableListFilter
    ReactorReq?: EnumReactorTechNullableListFilter
  }

  export type ThrusterPairWhereInput = {
    AND?: Enumerable<ThrusterPairWhereInput>
    OR?: Enumerable<ThrusterPairWhereInput>
    NOT?: Enumerable<ThrusterPairWhereInput>
    id?: IntFilter | number
    frontId?: IntFilter | number
    backId?: IntFilter | number
    front?: XOR<ThrusterRelationFilter, ThrusterWhereInput>
    back?: XOR<ThrusterRelationFilter, ThrusterWhereInput>
  }

  export type ThrusterPairOrderByWithRelationInput = {
    id?: SortOrder
    frontId?: SortOrder
    backId?: SortOrder
    front?: ThrusterOrderByWithRelationInput
    back?: ThrusterOrderByWithRelationInput
  }

  export type ThrusterPairWhereUniqueInput = {
    id?: number
    frontId?: number
    backId?: number
  }

  export type ThrusterPairOrderByWithAggregationInput = {
    id?: SortOrder
    frontId?: SortOrder
    backId?: SortOrder
    _count?: ThrusterPairCountOrderByAggregateInput
    _avg?: ThrusterPairAvgOrderByAggregateInput
    _max?: ThrusterPairMaxOrderByAggregateInput
    _min?: ThrusterPairMinOrderByAggregateInput
    _sum?: ThrusterPairSumOrderByAggregateInput
  }

  export type ThrusterPairScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ThrusterPairScalarWhereWithAggregatesInput>
    OR?: Enumerable<ThrusterPairScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ThrusterPairScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    frontId?: IntWithAggregatesFilter | number
    backId?: IntWithAggregatesFilter | number
  }

  export type ThrusterWhereInput = {
    AND?: Enumerable<ThrusterWhereInput>
    OR?: Enumerable<ThrusterWhereInput>
    NOT?: Enumerable<ThrusterWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    mass?: IntFilter | number
    radHard?: IntFilter | number
    spectralClass?: EnumSpectralClassFilter | SpectralClass
    fuelType?: EnumFuelTypeFilter | FuelType
    thrust?: IntFilter | number
    fuelConsumption?: FloatFilter | number
    afterBurn?: IntFilter | number
    powersatBonus?: IntNullableFilter | number | null
    abilities?: EnumAbilitiesNullableListFilter
    coolingReq?: IntFilter | number
    generatorReq?: EnumGeneratorTechNullableListFilter
    ReactorReq?: EnumReactorTechNullableListFilter
    cardFront?: XOR<ThrusterPairRelationFilter, ThrusterPairWhereInput> | null
    cardBack?: XOR<ThrusterPairRelationFilter, ThrusterPairWhereInput> | null
  }

  export type ThrusterOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    mass?: SortOrder
    radHard?: SortOrder
    spectralClass?: SortOrder
    fuelType?: SortOrder
    thrust?: SortOrder
    fuelConsumption?: SortOrder
    afterBurn?: SortOrder
    powersatBonus?: SortOrder
    abilities?: SortOrder
    coolingReq?: SortOrder
    generatorReq?: SortOrder
    ReactorReq?: SortOrder
    cardFront?: ThrusterPairOrderByWithRelationInput
    cardBack?: ThrusterPairOrderByWithRelationInput
  }

  export type ThrusterWhereUniqueInput = {
    id?: number
  }

  export type ThrusterOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    mass?: SortOrder
    radHard?: SortOrder
    spectralClass?: SortOrder
    fuelType?: SortOrder
    thrust?: SortOrder
    fuelConsumption?: SortOrder
    afterBurn?: SortOrder
    powersatBonus?: SortOrder
    abilities?: SortOrder
    coolingReq?: SortOrder
    generatorReq?: SortOrder
    ReactorReq?: SortOrder
    _count?: ThrusterCountOrderByAggregateInput
    _avg?: ThrusterAvgOrderByAggregateInput
    _max?: ThrusterMaxOrderByAggregateInput
    _min?: ThrusterMinOrderByAggregateInput
    _sum?: ThrusterSumOrderByAggregateInput
  }

  export type ThrusterScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ThrusterScalarWhereWithAggregatesInput>
    OR?: Enumerable<ThrusterScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ThrusterScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    mass?: IntWithAggregatesFilter | number
    radHard?: IntWithAggregatesFilter | number
    spectralClass?: EnumSpectralClassWithAggregatesFilter | SpectralClass
    fuelType?: EnumFuelTypeWithAggregatesFilter | FuelType
    thrust?: IntWithAggregatesFilter | number
    fuelConsumption?: FloatWithAggregatesFilter | number
    afterBurn?: IntWithAggregatesFilter | number
    powersatBonus?: IntNullableWithAggregatesFilter | number | null
    abilities?: EnumAbilitiesNullableListFilter
    coolingReq?: IntWithAggregatesFilter | number
    generatorReq?: EnumGeneratorTechNullableListFilter
    ReactorReq?: EnumReactorTechNullableListFilter
  }

  export type UserCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    role?: Role
  }

  export type UserUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    role?: Role
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type UserCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    role?: Role
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type ReactorPairCreateInput = {
    front: ReactorCreateNestedOneWithoutCardFrontInput
    back: ReactorCreateNestedOneWithoutCardBackInput
  }

  export type ReactorPairUncheckedCreateInput = {
    id?: number
    frontId: number
    backId: number
  }

  export type ReactorPairUpdateInput = {
    front?: ReactorUpdateOneRequiredWithoutCardFrontInput
    back?: ReactorUpdateOneRequiredWithoutCardBackInput
  }

  export type ReactorPairUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    frontId?: IntFieldUpdateOperationsInput | number
    backId?: IntFieldUpdateOperationsInput | number
  }

  export type ReactorPairCreateManyInput = {
    id?: number
    frontId: number
    backId: number
  }

  export type ReactorPairUpdateManyMutationInput = {

  }

  export type ReactorPairUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    frontId?: IntFieldUpdateOperationsInput | number
    backId?: IntFieldUpdateOperationsInput | number
  }

  export type ReactorCreateInput = {
    name?: string
    mass?: number
    radHard?: number
    spectralClass?: SpectralClass
    thrustModifier?: number
    fuelModifier?: number
    coolingReq?: number
    generatorReq: GeneratorTech
    ReactorReq: ReactorTech
    techs?: ReactorCreatetechsInput | Enumerable<GeneratorTech>
    abilities?: ReactorCreateabilitiesInput | Enumerable<Abilities>
    cardFront?: ReactorPairCreateNestedOneWithoutFrontInput
    cardBack?: ReactorPairCreateNestedOneWithoutBackInput
  }

  export type ReactorUncheckedCreateInput = {
    id?: number
    name?: string
    mass?: number
    radHard?: number
    spectralClass?: SpectralClass
    thrustModifier?: number
    fuelModifier?: number
    coolingReq?: number
    generatorReq: GeneratorTech
    ReactorReq: ReactorTech
    techs?: ReactorCreatetechsInput | Enumerable<GeneratorTech>
    abilities?: ReactorCreateabilitiesInput | Enumerable<Abilities>
    cardFront?: ReactorPairUncheckedCreateNestedOneWithoutFrontInput
    cardBack?: ReactorPairUncheckedCreateNestedOneWithoutBackInput
  }

  export type ReactorUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    mass?: IntFieldUpdateOperationsInput | number
    radHard?: IntFieldUpdateOperationsInput | number
    spectralClass?: EnumSpectralClassFieldUpdateOperationsInput | SpectralClass
    thrustModifier?: IntFieldUpdateOperationsInput | number
    fuelModifier?: FloatFieldUpdateOperationsInput | number
    coolingReq?: IntFieldUpdateOperationsInput | number
    generatorReq?: EnumGeneratorTechFieldUpdateOperationsInput | GeneratorTech
    ReactorReq?: EnumReactorTechFieldUpdateOperationsInput | ReactorTech
    techs?: ReactorUpdatetechsInput | Enumerable<GeneratorTech>
    abilities?: ReactorUpdateabilitiesInput | Enumerable<Abilities>
    cardFront?: ReactorPairUpdateOneWithoutFrontInput
    cardBack?: ReactorPairUpdateOneWithoutBackInput
  }

  export type ReactorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mass?: IntFieldUpdateOperationsInput | number
    radHard?: IntFieldUpdateOperationsInput | number
    spectralClass?: EnumSpectralClassFieldUpdateOperationsInput | SpectralClass
    thrustModifier?: IntFieldUpdateOperationsInput | number
    fuelModifier?: FloatFieldUpdateOperationsInput | number
    coolingReq?: IntFieldUpdateOperationsInput | number
    generatorReq?: EnumGeneratorTechFieldUpdateOperationsInput | GeneratorTech
    ReactorReq?: EnumReactorTechFieldUpdateOperationsInput | ReactorTech
    techs?: ReactorUpdatetechsInput | Enumerable<GeneratorTech>
    abilities?: ReactorUpdateabilitiesInput | Enumerable<Abilities>
    cardFront?: ReactorPairUncheckedUpdateOneWithoutFrontInput
    cardBack?: ReactorPairUncheckedUpdateOneWithoutBackInput
  }

  export type ReactorCreateManyInput = {
    id?: number
    name?: string
    mass?: number
    radHard?: number
    spectralClass?: SpectralClass
    thrustModifier?: number
    fuelModifier?: number
    coolingReq?: number
    generatorReq: GeneratorTech
    ReactorReq: ReactorTech
    techs?: ReactorCreateManytechsInput | Enumerable<GeneratorTech>
    abilities?: ReactorCreateManyabilitiesInput | Enumerable<Abilities>
  }

  export type ReactorUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    mass?: IntFieldUpdateOperationsInput | number
    radHard?: IntFieldUpdateOperationsInput | number
    spectralClass?: EnumSpectralClassFieldUpdateOperationsInput | SpectralClass
    thrustModifier?: IntFieldUpdateOperationsInput | number
    fuelModifier?: FloatFieldUpdateOperationsInput | number
    coolingReq?: IntFieldUpdateOperationsInput | number
    generatorReq?: EnumGeneratorTechFieldUpdateOperationsInput | GeneratorTech
    ReactorReq?: EnumReactorTechFieldUpdateOperationsInput | ReactorTech
    techs?: ReactorUpdatetechsInput | Enumerable<GeneratorTech>
    abilities?: ReactorUpdateabilitiesInput | Enumerable<Abilities>
  }

  export type ReactorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mass?: IntFieldUpdateOperationsInput | number
    radHard?: IntFieldUpdateOperationsInput | number
    spectralClass?: EnumSpectralClassFieldUpdateOperationsInput | SpectralClass
    thrustModifier?: IntFieldUpdateOperationsInput | number
    fuelModifier?: FloatFieldUpdateOperationsInput | number
    coolingReq?: IntFieldUpdateOperationsInput | number
    generatorReq?: EnumGeneratorTechFieldUpdateOperationsInput | GeneratorTech
    ReactorReq?: EnumReactorTechFieldUpdateOperationsInput | ReactorTech
    techs?: ReactorUpdatetechsInput | Enumerable<GeneratorTech>
    abilities?: ReactorUpdateabilitiesInput | Enumerable<Abilities>
  }

  export type GeneratorPairCreateInput = {
    front: GeneratorCreateNestedOneWithoutCardFrontInput
    back: GeneratorCreateNestedOneWithoutCardBackInput
  }

  export type GeneratorPairUncheckedCreateInput = {
    id?: number
    frontId: number
    backId: number
  }

  export type GeneratorPairUpdateInput = {
    front?: GeneratorUpdateOneRequiredWithoutCardFrontInput
    back?: GeneratorUpdateOneRequiredWithoutCardBackInput
  }

  export type GeneratorPairUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    frontId?: IntFieldUpdateOperationsInput | number
    backId?: IntFieldUpdateOperationsInput | number
  }

  export type GeneratorPairCreateManyInput = {
    id?: number
    frontId: number
    backId: number
  }

  export type GeneratorPairUpdateManyMutationInput = {

  }

  export type GeneratorPairUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    frontId?: IntFieldUpdateOperationsInput | number
    backId?: IntFieldUpdateOperationsInput | number
  }

  export type GeneratorCreateInput = {
    name?: string
    mass?: number
    radHard?: number
    spectralClass?: SpectralClass
    thrustModifier?: number
    fuelModifier?: number
    coolingReq?: number
    techs?: GeneratorCreatetechsInput | Enumerable<GeneratorTech>
    abilities?: GeneratorCreateabilitiesInput | Enumerable<Abilities>
    generatorReq?: GeneratorCreategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: GeneratorCreateReactorReqInput | Enumerable<ReactorTech>
    cardFront?: GeneratorPairCreateNestedOneWithoutFrontInput
    cardBack?: GeneratorPairCreateNestedOneWithoutBackInput
  }

  export type GeneratorUncheckedCreateInput = {
    id?: number
    name?: string
    mass?: number
    radHard?: number
    spectralClass?: SpectralClass
    thrustModifier?: number
    fuelModifier?: number
    coolingReq?: number
    techs?: GeneratorCreatetechsInput | Enumerable<GeneratorTech>
    abilities?: GeneratorCreateabilitiesInput | Enumerable<Abilities>
    generatorReq?: GeneratorCreategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: GeneratorCreateReactorReqInput | Enumerable<ReactorTech>
    cardFront?: GeneratorPairUncheckedCreateNestedOneWithoutFrontInput
    cardBack?: GeneratorPairUncheckedCreateNestedOneWithoutBackInput
  }

  export type GeneratorUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    mass?: IntFieldUpdateOperationsInput | number
    radHard?: IntFieldUpdateOperationsInput | number
    spectralClass?: EnumSpectralClassFieldUpdateOperationsInput | SpectralClass
    thrustModifier?: IntFieldUpdateOperationsInput | number
    fuelModifier?: FloatFieldUpdateOperationsInput | number
    coolingReq?: IntFieldUpdateOperationsInput | number
    techs?: GeneratorUpdatetechsInput | Enumerable<GeneratorTech>
    abilities?: GeneratorUpdateabilitiesInput | Enumerable<Abilities>
    generatorReq?: GeneratorUpdategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: GeneratorUpdateReactorReqInput | Enumerable<ReactorTech>
    cardFront?: GeneratorPairUpdateOneWithoutFrontInput
    cardBack?: GeneratorPairUpdateOneWithoutBackInput
  }

  export type GeneratorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mass?: IntFieldUpdateOperationsInput | number
    radHard?: IntFieldUpdateOperationsInput | number
    spectralClass?: EnumSpectralClassFieldUpdateOperationsInput | SpectralClass
    thrustModifier?: IntFieldUpdateOperationsInput | number
    fuelModifier?: FloatFieldUpdateOperationsInput | number
    coolingReq?: IntFieldUpdateOperationsInput | number
    techs?: GeneratorUpdatetechsInput | Enumerable<GeneratorTech>
    abilities?: GeneratorUpdateabilitiesInput | Enumerable<Abilities>
    generatorReq?: GeneratorUpdategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: GeneratorUpdateReactorReqInput | Enumerable<ReactorTech>
    cardFront?: GeneratorPairUncheckedUpdateOneWithoutFrontInput
    cardBack?: GeneratorPairUncheckedUpdateOneWithoutBackInput
  }

  export type GeneratorCreateManyInput = {
    id?: number
    name?: string
    mass?: number
    radHard?: number
    spectralClass?: SpectralClass
    thrustModifier?: number
    fuelModifier?: number
    coolingReq?: number
    techs?: GeneratorCreateManytechsInput | Enumerable<GeneratorTech>
    abilities?: GeneratorCreateManyabilitiesInput | Enumerable<Abilities>
    generatorReq?: GeneratorCreateManygeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: GeneratorCreateManyReactorReqInput | Enumerable<ReactorTech>
  }

  export type GeneratorUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    mass?: IntFieldUpdateOperationsInput | number
    radHard?: IntFieldUpdateOperationsInput | number
    spectralClass?: EnumSpectralClassFieldUpdateOperationsInput | SpectralClass
    thrustModifier?: IntFieldUpdateOperationsInput | number
    fuelModifier?: FloatFieldUpdateOperationsInput | number
    coolingReq?: IntFieldUpdateOperationsInput | number
    techs?: GeneratorUpdatetechsInput | Enumerable<GeneratorTech>
    abilities?: GeneratorUpdateabilitiesInput | Enumerable<Abilities>
    generatorReq?: GeneratorUpdategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: GeneratorUpdateReactorReqInput | Enumerable<ReactorTech>
  }

  export type GeneratorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mass?: IntFieldUpdateOperationsInput | number
    radHard?: IntFieldUpdateOperationsInput | number
    spectralClass?: EnumSpectralClassFieldUpdateOperationsInput | SpectralClass
    thrustModifier?: IntFieldUpdateOperationsInput | number
    fuelModifier?: FloatFieldUpdateOperationsInput | number
    coolingReq?: IntFieldUpdateOperationsInput | number
    techs?: GeneratorUpdatetechsInput | Enumerable<GeneratorTech>
    abilities?: GeneratorUpdateabilitiesInput | Enumerable<Abilities>
    generatorReq?: GeneratorUpdategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: GeneratorUpdateReactorReqInput | Enumerable<ReactorTech>
  }

  export type ThrusterPairCreateInput = {
    front: ThrusterCreateNestedOneWithoutCardFrontInput
    back: ThrusterCreateNestedOneWithoutCardBackInput
  }

  export type ThrusterPairUncheckedCreateInput = {
    id?: number
    frontId: number
    backId: number
  }

  export type ThrusterPairUpdateInput = {
    front?: ThrusterUpdateOneRequiredWithoutCardFrontInput
    back?: ThrusterUpdateOneRequiredWithoutCardBackInput
  }

  export type ThrusterPairUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    frontId?: IntFieldUpdateOperationsInput | number
    backId?: IntFieldUpdateOperationsInput | number
  }

  export type ThrusterPairCreateManyInput = {
    id?: number
    frontId: number
    backId: number
  }

  export type ThrusterPairUpdateManyMutationInput = {

  }

  export type ThrusterPairUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    frontId?: IntFieldUpdateOperationsInput | number
    backId?: IntFieldUpdateOperationsInput | number
  }

  export type ThrusterCreateInput = {
    name?: string
    mass?: number
    radHard?: number
    spectralClass?: SpectralClass
    fuelType?: FuelType
    thrust?: number
    fuelConsumption?: number
    afterBurn?: number
    powersatBonus?: number | null
    coolingReq?: number
    abilities?: ThrusterCreateabilitiesInput | Enumerable<Abilities>
    generatorReq?: ThrusterCreategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: ThrusterCreateReactorReqInput | Enumerable<ReactorTech>
    cardFront?: ThrusterPairCreateNestedOneWithoutFrontInput
    cardBack?: ThrusterPairCreateNestedOneWithoutBackInput
  }

  export type ThrusterUncheckedCreateInput = {
    id?: number
    name?: string
    mass?: number
    radHard?: number
    spectralClass?: SpectralClass
    fuelType?: FuelType
    thrust?: number
    fuelConsumption?: number
    afterBurn?: number
    powersatBonus?: number | null
    coolingReq?: number
    abilities?: ThrusterCreateabilitiesInput | Enumerable<Abilities>
    generatorReq?: ThrusterCreategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: ThrusterCreateReactorReqInput | Enumerable<ReactorTech>
    cardFront?: ThrusterPairUncheckedCreateNestedOneWithoutFrontInput
    cardBack?: ThrusterPairUncheckedCreateNestedOneWithoutBackInput
  }

  export type ThrusterUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    mass?: IntFieldUpdateOperationsInput | number
    radHard?: IntFieldUpdateOperationsInput | number
    spectralClass?: EnumSpectralClassFieldUpdateOperationsInput | SpectralClass
    fuelType?: EnumFuelTypeFieldUpdateOperationsInput | FuelType
    thrust?: IntFieldUpdateOperationsInput | number
    fuelConsumption?: FloatFieldUpdateOperationsInput | number
    afterBurn?: IntFieldUpdateOperationsInput | number
    powersatBonus?: NullableIntFieldUpdateOperationsInput | number | null
    coolingReq?: IntFieldUpdateOperationsInput | number
    abilities?: ThrusterUpdateabilitiesInput | Enumerable<Abilities>
    generatorReq?: ThrusterUpdategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: ThrusterUpdateReactorReqInput | Enumerable<ReactorTech>
    cardFront?: ThrusterPairUpdateOneWithoutFrontInput
    cardBack?: ThrusterPairUpdateOneWithoutBackInput
  }

  export type ThrusterUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mass?: IntFieldUpdateOperationsInput | number
    radHard?: IntFieldUpdateOperationsInput | number
    spectralClass?: EnumSpectralClassFieldUpdateOperationsInput | SpectralClass
    fuelType?: EnumFuelTypeFieldUpdateOperationsInput | FuelType
    thrust?: IntFieldUpdateOperationsInput | number
    fuelConsumption?: FloatFieldUpdateOperationsInput | number
    afterBurn?: IntFieldUpdateOperationsInput | number
    powersatBonus?: NullableIntFieldUpdateOperationsInput | number | null
    coolingReq?: IntFieldUpdateOperationsInput | number
    abilities?: ThrusterUpdateabilitiesInput | Enumerable<Abilities>
    generatorReq?: ThrusterUpdategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: ThrusterUpdateReactorReqInput | Enumerable<ReactorTech>
    cardFront?: ThrusterPairUncheckedUpdateOneWithoutFrontInput
    cardBack?: ThrusterPairUncheckedUpdateOneWithoutBackInput
  }

  export type ThrusterCreateManyInput = {
    id?: number
    name?: string
    mass?: number
    radHard?: number
    spectralClass?: SpectralClass
    fuelType?: FuelType
    thrust?: number
    fuelConsumption?: number
    afterBurn?: number
    powersatBonus?: number | null
    coolingReq?: number
    abilities?: ThrusterCreateManyabilitiesInput | Enumerable<Abilities>
    generatorReq?: ThrusterCreateManygeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: ThrusterCreateManyReactorReqInput | Enumerable<ReactorTech>
  }

  export type ThrusterUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    mass?: IntFieldUpdateOperationsInput | number
    radHard?: IntFieldUpdateOperationsInput | number
    spectralClass?: EnumSpectralClassFieldUpdateOperationsInput | SpectralClass
    fuelType?: EnumFuelTypeFieldUpdateOperationsInput | FuelType
    thrust?: IntFieldUpdateOperationsInput | number
    fuelConsumption?: FloatFieldUpdateOperationsInput | number
    afterBurn?: IntFieldUpdateOperationsInput | number
    powersatBonus?: NullableIntFieldUpdateOperationsInput | number | null
    coolingReq?: IntFieldUpdateOperationsInput | number
    abilities?: ThrusterUpdateabilitiesInput | Enumerable<Abilities>
    generatorReq?: ThrusterUpdategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: ThrusterUpdateReactorReqInput | Enumerable<ReactorTech>
  }

  export type ThrusterUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mass?: IntFieldUpdateOperationsInput | number
    radHard?: IntFieldUpdateOperationsInput | number
    spectralClass?: EnumSpectralClassFieldUpdateOperationsInput | SpectralClass
    fuelType?: EnumFuelTypeFieldUpdateOperationsInput | FuelType
    thrust?: IntFieldUpdateOperationsInput | number
    fuelConsumption?: FloatFieldUpdateOperationsInput | number
    afterBurn?: IntFieldUpdateOperationsInput | number
    powersatBonus?: NullableIntFieldUpdateOperationsInput | number | null
    coolingReq?: IntFieldUpdateOperationsInput | number
    abilities?: ThrusterUpdateabilitiesInput | Enumerable<Abilities>
    generatorReq?: ThrusterUpdategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: ThrusterUpdateReactorReqInput | Enumerable<ReactorTech>
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type EnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    role?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    role?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type EnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type ReactorRelationFilter = {
    is?: ReactorWhereInput
    isNot?: ReactorWhereInput
  }

  export type ReactorPairCountOrderByAggregateInput = {
    id?: SortOrder
    frontId?: SortOrder
    backId?: SortOrder
  }

  export type ReactorPairAvgOrderByAggregateInput = {
    id?: SortOrder
    frontId?: SortOrder
    backId?: SortOrder
  }

  export type ReactorPairMaxOrderByAggregateInput = {
    id?: SortOrder
    frontId?: SortOrder
    backId?: SortOrder
  }

  export type ReactorPairMinOrderByAggregateInput = {
    id?: SortOrder
    frontId?: SortOrder
    backId?: SortOrder
  }

  export type ReactorPairSumOrderByAggregateInput = {
    id?: SortOrder
    frontId?: SortOrder
    backId?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type EnumSpectralClassFilter = {
    equals?: SpectralClass
    in?: Enumerable<SpectralClass>
    notIn?: Enumerable<SpectralClass>
    not?: NestedEnumSpectralClassFilter | SpectralClass
  }

  export type EnumGeneratorTechNullableListFilter = {
    equals?: Enumerable<GeneratorTech> | null
    has?: GeneratorTech | null
    hasEvery?: Enumerable<GeneratorTech>
    hasSome?: Enumerable<GeneratorTech>
    isEmpty?: boolean
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type EnumAbilitiesNullableListFilter = {
    equals?: Enumerable<Abilities> | null
    has?: Abilities | null
    hasEvery?: Enumerable<Abilities>
    hasSome?: Enumerable<Abilities>
    isEmpty?: boolean
  }

  export type EnumGeneratorTechFilter = {
    equals?: GeneratorTech
    in?: Enumerable<GeneratorTech>
    notIn?: Enumerable<GeneratorTech>
    not?: NestedEnumGeneratorTechFilter | GeneratorTech
  }

  export type EnumReactorTechFilter = {
    equals?: ReactorTech
    in?: Enumerable<ReactorTech>
    notIn?: Enumerable<ReactorTech>
    not?: NestedEnumReactorTechFilter | ReactorTech
  }

  export type ReactorPairRelationFilter = {
    is?: ReactorPairWhereInput | null
    isNot?: ReactorPairWhereInput | null
  }

  export type ReactorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mass?: SortOrder
    radHard?: SortOrder
    spectralClass?: SortOrder
    techs?: SortOrder
    thrustModifier?: SortOrder
    fuelModifier?: SortOrder
    abilities?: SortOrder
    coolingReq?: SortOrder
    generatorReq?: SortOrder
    ReactorReq?: SortOrder
  }

  export type ReactorAvgOrderByAggregateInput = {
    id?: SortOrder
    mass?: SortOrder
    radHard?: SortOrder
    thrustModifier?: SortOrder
    fuelModifier?: SortOrder
    coolingReq?: SortOrder
  }

  export type ReactorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mass?: SortOrder
    radHard?: SortOrder
    spectralClass?: SortOrder
    thrustModifier?: SortOrder
    fuelModifier?: SortOrder
    coolingReq?: SortOrder
    generatorReq?: SortOrder
    ReactorReq?: SortOrder
  }

  export type ReactorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mass?: SortOrder
    radHard?: SortOrder
    spectralClass?: SortOrder
    thrustModifier?: SortOrder
    fuelModifier?: SortOrder
    coolingReq?: SortOrder
    generatorReq?: SortOrder
    ReactorReq?: SortOrder
  }

  export type ReactorSumOrderByAggregateInput = {
    id?: SortOrder
    mass?: SortOrder
    radHard?: SortOrder
    thrustModifier?: SortOrder
    fuelModifier?: SortOrder
    coolingReq?: SortOrder
  }

  export type EnumSpectralClassWithAggregatesFilter = {
    equals?: SpectralClass
    in?: Enumerable<SpectralClass>
    notIn?: Enumerable<SpectralClass>
    not?: NestedEnumSpectralClassWithAggregatesFilter | SpectralClass
    _count?: NestedIntFilter
    _min?: NestedEnumSpectralClassFilter
    _max?: NestedEnumSpectralClassFilter
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type EnumGeneratorTechWithAggregatesFilter = {
    equals?: GeneratorTech
    in?: Enumerable<GeneratorTech>
    notIn?: Enumerable<GeneratorTech>
    not?: NestedEnumGeneratorTechWithAggregatesFilter | GeneratorTech
    _count?: NestedIntFilter
    _min?: NestedEnumGeneratorTechFilter
    _max?: NestedEnumGeneratorTechFilter
  }

  export type EnumReactorTechWithAggregatesFilter = {
    equals?: ReactorTech
    in?: Enumerable<ReactorTech>
    notIn?: Enumerable<ReactorTech>
    not?: NestedEnumReactorTechWithAggregatesFilter | ReactorTech
    _count?: NestedIntFilter
    _min?: NestedEnumReactorTechFilter
    _max?: NestedEnumReactorTechFilter
  }

  export type GeneratorRelationFilter = {
    is?: GeneratorWhereInput
    isNot?: GeneratorWhereInput
  }

  export type GeneratorPairCountOrderByAggregateInput = {
    id?: SortOrder
    frontId?: SortOrder
    backId?: SortOrder
  }

  export type GeneratorPairAvgOrderByAggregateInput = {
    id?: SortOrder
    frontId?: SortOrder
    backId?: SortOrder
  }

  export type GeneratorPairMaxOrderByAggregateInput = {
    id?: SortOrder
    frontId?: SortOrder
    backId?: SortOrder
  }

  export type GeneratorPairMinOrderByAggregateInput = {
    id?: SortOrder
    frontId?: SortOrder
    backId?: SortOrder
  }

  export type GeneratorPairSumOrderByAggregateInput = {
    id?: SortOrder
    frontId?: SortOrder
    backId?: SortOrder
  }

  export type EnumReactorTechNullableListFilter = {
    equals?: Enumerable<ReactorTech> | null
    has?: ReactorTech | null
    hasEvery?: Enumerable<ReactorTech>
    hasSome?: Enumerable<ReactorTech>
    isEmpty?: boolean
  }

  export type GeneratorPairRelationFilter = {
    is?: GeneratorPairWhereInput | null
    isNot?: GeneratorPairWhereInput | null
  }

  export type GeneratorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mass?: SortOrder
    radHard?: SortOrder
    spectralClass?: SortOrder
    techs?: SortOrder
    thrustModifier?: SortOrder
    fuelModifier?: SortOrder
    abilities?: SortOrder
    coolingReq?: SortOrder
    generatorReq?: SortOrder
    ReactorReq?: SortOrder
  }

  export type GeneratorAvgOrderByAggregateInput = {
    id?: SortOrder
    mass?: SortOrder
    radHard?: SortOrder
    thrustModifier?: SortOrder
    fuelModifier?: SortOrder
    coolingReq?: SortOrder
  }

  export type GeneratorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mass?: SortOrder
    radHard?: SortOrder
    spectralClass?: SortOrder
    thrustModifier?: SortOrder
    fuelModifier?: SortOrder
    coolingReq?: SortOrder
  }

  export type GeneratorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mass?: SortOrder
    radHard?: SortOrder
    spectralClass?: SortOrder
    thrustModifier?: SortOrder
    fuelModifier?: SortOrder
    coolingReq?: SortOrder
  }

  export type GeneratorSumOrderByAggregateInput = {
    id?: SortOrder
    mass?: SortOrder
    radHard?: SortOrder
    thrustModifier?: SortOrder
    fuelModifier?: SortOrder
    coolingReq?: SortOrder
  }

  export type ThrusterRelationFilter = {
    is?: ThrusterWhereInput
    isNot?: ThrusterWhereInput
  }

  export type ThrusterPairCountOrderByAggregateInput = {
    id?: SortOrder
    frontId?: SortOrder
    backId?: SortOrder
  }

  export type ThrusterPairAvgOrderByAggregateInput = {
    id?: SortOrder
    frontId?: SortOrder
    backId?: SortOrder
  }

  export type ThrusterPairMaxOrderByAggregateInput = {
    id?: SortOrder
    frontId?: SortOrder
    backId?: SortOrder
  }

  export type ThrusterPairMinOrderByAggregateInput = {
    id?: SortOrder
    frontId?: SortOrder
    backId?: SortOrder
  }

  export type ThrusterPairSumOrderByAggregateInput = {
    id?: SortOrder
    frontId?: SortOrder
    backId?: SortOrder
  }

  export type EnumFuelTypeFilter = {
    equals?: FuelType
    in?: Enumerable<FuelType>
    notIn?: Enumerable<FuelType>
    not?: NestedEnumFuelTypeFilter | FuelType
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type ThrusterPairRelationFilter = {
    is?: ThrusterPairWhereInput | null
    isNot?: ThrusterPairWhereInput | null
  }

  export type ThrusterCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mass?: SortOrder
    radHard?: SortOrder
    spectralClass?: SortOrder
    fuelType?: SortOrder
    thrust?: SortOrder
    fuelConsumption?: SortOrder
    afterBurn?: SortOrder
    powersatBonus?: SortOrder
    abilities?: SortOrder
    coolingReq?: SortOrder
    generatorReq?: SortOrder
    ReactorReq?: SortOrder
  }

  export type ThrusterAvgOrderByAggregateInput = {
    id?: SortOrder
    mass?: SortOrder
    radHard?: SortOrder
    thrust?: SortOrder
    fuelConsumption?: SortOrder
    afterBurn?: SortOrder
    powersatBonus?: SortOrder
    coolingReq?: SortOrder
  }

  export type ThrusterMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mass?: SortOrder
    radHard?: SortOrder
    spectralClass?: SortOrder
    fuelType?: SortOrder
    thrust?: SortOrder
    fuelConsumption?: SortOrder
    afterBurn?: SortOrder
    powersatBonus?: SortOrder
    coolingReq?: SortOrder
  }

  export type ThrusterMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mass?: SortOrder
    radHard?: SortOrder
    spectralClass?: SortOrder
    fuelType?: SortOrder
    thrust?: SortOrder
    fuelConsumption?: SortOrder
    afterBurn?: SortOrder
    powersatBonus?: SortOrder
    coolingReq?: SortOrder
  }

  export type ThrusterSumOrderByAggregateInput = {
    id?: SortOrder
    mass?: SortOrder
    radHard?: SortOrder
    thrust?: SortOrder
    fuelConsumption?: SortOrder
    afterBurn?: SortOrder
    powersatBonus?: SortOrder
    coolingReq?: SortOrder
  }

  export type EnumFuelTypeWithAggregatesFilter = {
    equals?: FuelType
    in?: Enumerable<FuelType>
    notIn?: Enumerable<FuelType>
    not?: NestedEnumFuelTypeWithAggregatesFilter | FuelType
    _count?: NestedIntFilter
    _min?: NestedEnumFuelTypeFilter
    _max?: NestedEnumFuelTypeFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role
  }

  export type ReactorCreateNestedOneWithoutCardFrontInput = {
    create?: XOR<ReactorCreateWithoutCardFrontInput, ReactorUncheckedCreateWithoutCardFrontInput>
    connectOrCreate?: ReactorCreateOrConnectWithoutCardFrontInput
    connect?: ReactorWhereUniqueInput
  }

  export type ReactorCreateNestedOneWithoutCardBackInput = {
    create?: XOR<ReactorCreateWithoutCardBackInput, ReactorUncheckedCreateWithoutCardBackInput>
    connectOrCreate?: ReactorCreateOrConnectWithoutCardBackInput
    connect?: ReactorWhereUniqueInput
  }

  export type ReactorUpdateOneRequiredWithoutCardFrontInput = {
    create?: XOR<ReactorCreateWithoutCardFrontInput, ReactorUncheckedCreateWithoutCardFrontInput>
    connectOrCreate?: ReactorCreateOrConnectWithoutCardFrontInput
    upsert?: ReactorUpsertWithoutCardFrontInput
    connect?: ReactorWhereUniqueInput
    update?: XOR<ReactorUpdateWithoutCardFrontInput, ReactorUncheckedUpdateWithoutCardFrontInput>
  }

  export type ReactorUpdateOneRequiredWithoutCardBackInput = {
    create?: XOR<ReactorCreateWithoutCardBackInput, ReactorUncheckedCreateWithoutCardBackInput>
    connectOrCreate?: ReactorCreateOrConnectWithoutCardBackInput
    upsert?: ReactorUpsertWithoutCardBackInput
    connect?: ReactorWhereUniqueInput
    update?: XOR<ReactorUpdateWithoutCardBackInput, ReactorUncheckedUpdateWithoutCardBackInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ReactorCreatetechsInput = {
    set: Enumerable<GeneratorTech>
  }

  export type ReactorCreateabilitiesInput = {
    set: Enumerable<Abilities>
  }

  export type ReactorPairCreateNestedOneWithoutFrontInput = {
    create?: XOR<ReactorPairCreateWithoutFrontInput, ReactorPairUncheckedCreateWithoutFrontInput>
    connectOrCreate?: ReactorPairCreateOrConnectWithoutFrontInput
    connect?: ReactorPairWhereUniqueInput
  }

  export type ReactorPairCreateNestedOneWithoutBackInput = {
    create?: XOR<ReactorPairCreateWithoutBackInput, ReactorPairUncheckedCreateWithoutBackInput>
    connectOrCreate?: ReactorPairCreateOrConnectWithoutBackInput
    connect?: ReactorPairWhereUniqueInput
  }

  export type ReactorPairUncheckedCreateNestedOneWithoutFrontInput = {
    create?: XOR<ReactorPairCreateWithoutFrontInput, ReactorPairUncheckedCreateWithoutFrontInput>
    connectOrCreate?: ReactorPairCreateOrConnectWithoutFrontInput
    connect?: ReactorPairWhereUniqueInput
  }

  export type ReactorPairUncheckedCreateNestedOneWithoutBackInput = {
    create?: XOR<ReactorPairCreateWithoutBackInput, ReactorPairUncheckedCreateWithoutBackInput>
    connectOrCreate?: ReactorPairCreateOrConnectWithoutBackInput
    connect?: ReactorPairWhereUniqueInput
  }

  export type EnumSpectralClassFieldUpdateOperationsInput = {
    set?: SpectralClass
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumGeneratorTechFieldUpdateOperationsInput = {
    set?: GeneratorTech
  }

  export type EnumReactorTechFieldUpdateOperationsInput = {
    set?: ReactorTech
  }

  export type ReactorUpdatetechsInput = {
    set?: Enumerable<GeneratorTech>
    push?: Enumerable<GeneratorTech>
  }

  export type ReactorUpdateabilitiesInput = {
    set?: Enumerable<Abilities>
    push?: Enumerable<Abilities>
  }

  export type ReactorPairUpdateOneWithoutFrontInput = {
    create?: XOR<ReactorPairCreateWithoutFrontInput, ReactorPairUncheckedCreateWithoutFrontInput>
    connectOrCreate?: ReactorPairCreateOrConnectWithoutFrontInput
    upsert?: ReactorPairUpsertWithoutFrontInput
    disconnect?: boolean
    delete?: boolean
    connect?: ReactorPairWhereUniqueInput
    update?: XOR<ReactorPairUpdateWithoutFrontInput, ReactorPairUncheckedUpdateWithoutFrontInput>
  }

  export type ReactorPairUpdateOneWithoutBackInput = {
    create?: XOR<ReactorPairCreateWithoutBackInput, ReactorPairUncheckedCreateWithoutBackInput>
    connectOrCreate?: ReactorPairCreateOrConnectWithoutBackInput
    upsert?: ReactorPairUpsertWithoutBackInput
    disconnect?: boolean
    delete?: boolean
    connect?: ReactorPairWhereUniqueInput
    update?: XOR<ReactorPairUpdateWithoutBackInput, ReactorPairUncheckedUpdateWithoutBackInput>
  }

  export type ReactorPairUncheckedUpdateOneWithoutFrontInput = {
    create?: XOR<ReactorPairCreateWithoutFrontInput, ReactorPairUncheckedCreateWithoutFrontInput>
    connectOrCreate?: ReactorPairCreateOrConnectWithoutFrontInput
    upsert?: ReactorPairUpsertWithoutFrontInput
    disconnect?: boolean
    delete?: boolean
    connect?: ReactorPairWhereUniqueInput
    update?: XOR<ReactorPairUpdateWithoutFrontInput, ReactorPairUncheckedUpdateWithoutFrontInput>
  }

  export type ReactorPairUncheckedUpdateOneWithoutBackInput = {
    create?: XOR<ReactorPairCreateWithoutBackInput, ReactorPairUncheckedCreateWithoutBackInput>
    connectOrCreate?: ReactorPairCreateOrConnectWithoutBackInput
    upsert?: ReactorPairUpsertWithoutBackInput
    disconnect?: boolean
    delete?: boolean
    connect?: ReactorPairWhereUniqueInput
    update?: XOR<ReactorPairUpdateWithoutBackInput, ReactorPairUncheckedUpdateWithoutBackInput>
  }

  export type ReactorCreateManytechsInput = {
    set: Enumerable<GeneratorTech>
  }

  export type ReactorCreateManyabilitiesInput = {
    set: Enumerable<Abilities>
  }

  export type GeneratorCreateNestedOneWithoutCardFrontInput = {
    create?: XOR<GeneratorCreateWithoutCardFrontInput, GeneratorUncheckedCreateWithoutCardFrontInput>
    connectOrCreate?: GeneratorCreateOrConnectWithoutCardFrontInput
    connect?: GeneratorWhereUniqueInput
  }

  export type GeneratorCreateNestedOneWithoutCardBackInput = {
    create?: XOR<GeneratorCreateWithoutCardBackInput, GeneratorUncheckedCreateWithoutCardBackInput>
    connectOrCreate?: GeneratorCreateOrConnectWithoutCardBackInput
    connect?: GeneratorWhereUniqueInput
  }

  export type GeneratorUpdateOneRequiredWithoutCardFrontInput = {
    create?: XOR<GeneratorCreateWithoutCardFrontInput, GeneratorUncheckedCreateWithoutCardFrontInput>
    connectOrCreate?: GeneratorCreateOrConnectWithoutCardFrontInput
    upsert?: GeneratorUpsertWithoutCardFrontInput
    connect?: GeneratorWhereUniqueInput
    update?: XOR<GeneratorUpdateWithoutCardFrontInput, GeneratorUncheckedUpdateWithoutCardFrontInput>
  }

  export type GeneratorUpdateOneRequiredWithoutCardBackInput = {
    create?: XOR<GeneratorCreateWithoutCardBackInput, GeneratorUncheckedCreateWithoutCardBackInput>
    connectOrCreate?: GeneratorCreateOrConnectWithoutCardBackInput
    upsert?: GeneratorUpsertWithoutCardBackInput
    connect?: GeneratorWhereUniqueInput
    update?: XOR<GeneratorUpdateWithoutCardBackInput, GeneratorUncheckedUpdateWithoutCardBackInput>
  }

  export type GeneratorCreatetechsInput = {
    set: Enumerable<GeneratorTech>
  }

  export type GeneratorCreateabilitiesInput = {
    set: Enumerable<Abilities>
  }

  export type GeneratorCreategeneratorReqInput = {
    set: Enumerable<GeneratorTech>
  }

  export type GeneratorCreateReactorReqInput = {
    set: Enumerable<ReactorTech>
  }

  export type GeneratorPairCreateNestedOneWithoutFrontInput = {
    create?: XOR<GeneratorPairCreateWithoutFrontInput, GeneratorPairUncheckedCreateWithoutFrontInput>
    connectOrCreate?: GeneratorPairCreateOrConnectWithoutFrontInput
    connect?: GeneratorPairWhereUniqueInput
  }

  export type GeneratorPairCreateNestedOneWithoutBackInput = {
    create?: XOR<GeneratorPairCreateWithoutBackInput, GeneratorPairUncheckedCreateWithoutBackInput>
    connectOrCreate?: GeneratorPairCreateOrConnectWithoutBackInput
    connect?: GeneratorPairWhereUniqueInput
  }

  export type GeneratorPairUncheckedCreateNestedOneWithoutFrontInput = {
    create?: XOR<GeneratorPairCreateWithoutFrontInput, GeneratorPairUncheckedCreateWithoutFrontInput>
    connectOrCreate?: GeneratorPairCreateOrConnectWithoutFrontInput
    connect?: GeneratorPairWhereUniqueInput
  }

  export type GeneratorPairUncheckedCreateNestedOneWithoutBackInput = {
    create?: XOR<GeneratorPairCreateWithoutBackInput, GeneratorPairUncheckedCreateWithoutBackInput>
    connectOrCreate?: GeneratorPairCreateOrConnectWithoutBackInput
    connect?: GeneratorPairWhereUniqueInput
  }

  export type GeneratorUpdatetechsInput = {
    set?: Enumerable<GeneratorTech>
    push?: Enumerable<GeneratorTech>
  }

  export type GeneratorUpdateabilitiesInput = {
    set?: Enumerable<Abilities>
    push?: Enumerable<Abilities>
  }

  export type GeneratorUpdategeneratorReqInput = {
    set?: Enumerable<GeneratorTech>
    push?: Enumerable<GeneratorTech>
  }

  export type GeneratorUpdateReactorReqInput = {
    set?: Enumerable<ReactorTech>
    push?: Enumerable<ReactorTech>
  }

  export type GeneratorPairUpdateOneWithoutFrontInput = {
    create?: XOR<GeneratorPairCreateWithoutFrontInput, GeneratorPairUncheckedCreateWithoutFrontInput>
    connectOrCreate?: GeneratorPairCreateOrConnectWithoutFrontInput
    upsert?: GeneratorPairUpsertWithoutFrontInput
    disconnect?: boolean
    delete?: boolean
    connect?: GeneratorPairWhereUniqueInput
    update?: XOR<GeneratorPairUpdateWithoutFrontInput, GeneratorPairUncheckedUpdateWithoutFrontInput>
  }

  export type GeneratorPairUpdateOneWithoutBackInput = {
    create?: XOR<GeneratorPairCreateWithoutBackInput, GeneratorPairUncheckedCreateWithoutBackInput>
    connectOrCreate?: GeneratorPairCreateOrConnectWithoutBackInput
    upsert?: GeneratorPairUpsertWithoutBackInput
    disconnect?: boolean
    delete?: boolean
    connect?: GeneratorPairWhereUniqueInput
    update?: XOR<GeneratorPairUpdateWithoutBackInput, GeneratorPairUncheckedUpdateWithoutBackInput>
  }

  export type GeneratorPairUncheckedUpdateOneWithoutFrontInput = {
    create?: XOR<GeneratorPairCreateWithoutFrontInput, GeneratorPairUncheckedCreateWithoutFrontInput>
    connectOrCreate?: GeneratorPairCreateOrConnectWithoutFrontInput
    upsert?: GeneratorPairUpsertWithoutFrontInput
    disconnect?: boolean
    delete?: boolean
    connect?: GeneratorPairWhereUniqueInput
    update?: XOR<GeneratorPairUpdateWithoutFrontInput, GeneratorPairUncheckedUpdateWithoutFrontInput>
  }

  export type GeneratorPairUncheckedUpdateOneWithoutBackInput = {
    create?: XOR<GeneratorPairCreateWithoutBackInput, GeneratorPairUncheckedCreateWithoutBackInput>
    connectOrCreate?: GeneratorPairCreateOrConnectWithoutBackInput
    upsert?: GeneratorPairUpsertWithoutBackInput
    disconnect?: boolean
    delete?: boolean
    connect?: GeneratorPairWhereUniqueInput
    update?: XOR<GeneratorPairUpdateWithoutBackInput, GeneratorPairUncheckedUpdateWithoutBackInput>
  }

  export type GeneratorCreateManytechsInput = {
    set: Enumerable<GeneratorTech>
  }

  export type GeneratorCreateManyabilitiesInput = {
    set: Enumerable<Abilities>
  }

  export type GeneratorCreateManygeneratorReqInput = {
    set: Enumerable<GeneratorTech>
  }

  export type GeneratorCreateManyReactorReqInput = {
    set: Enumerable<ReactorTech>
  }

  export type ThrusterCreateNestedOneWithoutCardFrontInput = {
    create?: XOR<ThrusterCreateWithoutCardFrontInput, ThrusterUncheckedCreateWithoutCardFrontInput>
    connectOrCreate?: ThrusterCreateOrConnectWithoutCardFrontInput
    connect?: ThrusterWhereUniqueInput
  }

  export type ThrusterCreateNestedOneWithoutCardBackInput = {
    create?: XOR<ThrusterCreateWithoutCardBackInput, ThrusterUncheckedCreateWithoutCardBackInput>
    connectOrCreate?: ThrusterCreateOrConnectWithoutCardBackInput
    connect?: ThrusterWhereUniqueInput
  }

  export type ThrusterUpdateOneRequiredWithoutCardFrontInput = {
    create?: XOR<ThrusterCreateWithoutCardFrontInput, ThrusterUncheckedCreateWithoutCardFrontInput>
    connectOrCreate?: ThrusterCreateOrConnectWithoutCardFrontInput
    upsert?: ThrusterUpsertWithoutCardFrontInput
    connect?: ThrusterWhereUniqueInput
    update?: XOR<ThrusterUpdateWithoutCardFrontInput, ThrusterUncheckedUpdateWithoutCardFrontInput>
  }

  export type ThrusterUpdateOneRequiredWithoutCardBackInput = {
    create?: XOR<ThrusterCreateWithoutCardBackInput, ThrusterUncheckedCreateWithoutCardBackInput>
    connectOrCreate?: ThrusterCreateOrConnectWithoutCardBackInput
    upsert?: ThrusterUpsertWithoutCardBackInput
    connect?: ThrusterWhereUniqueInput
    update?: XOR<ThrusterUpdateWithoutCardBackInput, ThrusterUncheckedUpdateWithoutCardBackInput>
  }

  export type ThrusterCreateabilitiesInput = {
    set: Enumerable<Abilities>
  }

  export type ThrusterCreategeneratorReqInput = {
    set: Enumerable<GeneratorTech>
  }

  export type ThrusterCreateReactorReqInput = {
    set: Enumerable<ReactorTech>
  }

  export type ThrusterPairCreateNestedOneWithoutFrontInput = {
    create?: XOR<ThrusterPairCreateWithoutFrontInput, ThrusterPairUncheckedCreateWithoutFrontInput>
    connectOrCreate?: ThrusterPairCreateOrConnectWithoutFrontInput
    connect?: ThrusterPairWhereUniqueInput
  }

  export type ThrusterPairCreateNestedOneWithoutBackInput = {
    create?: XOR<ThrusterPairCreateWithoutBackInput, ThrusterPairUncheckedCreateWithoutBackInput>
    connectOrCreate?: ThrusterPairCreateOrConnectWithoutBackInput
    connect?: ThrusterPairWhereUniqueInput
  }

  export type ThrusterPairUncheckedCreateNestedOneWithoutFrontInput = {
    create?: XOR<ThrusterPairCreateWithoutFrontInput, ThrusterPairUncheckedCreateWithoutFrontInput>
    connectOrCreate?: ThrusterPairCreateOrConnectWithoutFrontInput
    connect?: ThrusterPairWhereUniqueInput
  }

  export type ThrusterPairUncheckedCreateNestedOneWithoutBackInput = {
    create?: XOR<ThrusterPairCreateWithoutBackInput, ThrusterPairUncheckedCreateWithoutBackInput>
    connectOrCreate?: ThrusterPairCreateOrConnectWithoutBackInput
    connect?: ThrusterPairWhereUniqueInput
  }

  export type EnumFuelTypeFieldUpdateOperationsInput = {
    set?: FuelType
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ThrusterUpdateabilitiesInput = {
    set?: Enumerable<Abilities>
    push?: Enumerable<Abilities>
  }

  export type ThrusterUpdategeneratorReqInput = {
    set?: Enumerable<GeneratorTech>
    push?: Enumerable<GeneratorTech>
  }

  export type ThrusterUpdateReactorReqInput = {
    set?: Enumerable<ReactorTech>
    push?: Enumerable<ReactorTech>
  }

  export type ThrusterPairUpdateOneWithoutFrontInput = {
    create?: XOR<ThrusterPairCreateWithoutFrontInput, ThrusterPairUncheckedCreateWithoutFrontInput>
    connectOrCreate?: ThrusterPairCreateOrConnectWithoutFrontInput
    upsert?: ThrusterPairUpsertWithoutFrontInput
    disconnect?: boolean
    delete?: boolean
    connect?: ThrusterPairWhereUniqueInput
    update?: XOR<ThrusterPairUpdateWithoutFrontInput, ThrusterPairUncheckedUpdateWithoutFrontInput>
  }

  export type ThrusterPairUpdateOneWithoutBackInput = {
    create?: XOR<ThrusterPairCreateWithoutBackInput, ThrusterPairUncheckedCreateWithoutBackInput>
    connectOrCreate?: ThrusterPairCreateOrConnectWithoutBackInput
    upsert?: ThrusterPairUpsertWithoutBackInput
    disconnect?: boolean
    delete?: boolean
    connect?: ThrusterPairWhereUniqueInput
    update?: XOR<ThrusterPairUpdateWithoutBackInput, ThrusterPairUncheckedUpdateWithoutBackInput>
  }

  export type ThrusterPairUncheckedUpdateOneWithoutFrontInput = {
    create?: XOR<ThrusterPairCreateWithoutFrontInput, ThrusterPairUncheckedCreateWithoutFrontInput>
    connectOrCreate?: ThrusterPairCreateOrConnectWithoutFrontInput
    upsert?: ThrusterPairUpsertWithoutFrontInput
    disconnect?: boolean
    delete?: boolean
    connect?: ThrusterPairWhereUniqueInput
    update?: XOR<ThrusterPairUpdateWithoutFrontInput, ThrusterPairUncheckedUpdateWithoutFrontInput>
  }

  export type ThrusterPairUncheckedUpdateOneWithoutBackInput = {
    create?: XOR<ThrusterPairCreateWithoutBackInput, ThrusterPairUncheckedCreateWithoutBackInput>
    connectOrCreate?: ThrusterPairCreateOrConnectWithoutBackInput
    upsert?: ThrusterPairUpsertWithoutBackInput
    disconnect?: boolean
    delete?: boolean
    connect?: ThrusterPairWhereUniqueInput
    update?: XOR<ThrusterPairUpdateWithoutBackInput, ThrusterPairUncheckedUpdateWithoutBackInput>
  }

  export type ThrusterCreateManyabilitiesInput = {
    set: Enumerable<Abilities>
  }

  export type ThrusterCreateManygeneratorReqInput = {
    set: Enumerable<GeneratorTech>
  }

  export type ThrusterCreateManyReactorReqInput = {
    set: Enumerable<ReactorTech>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedEnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedEnumSpectralClassFilter = {
    equals?: SpectralClass
    in?: Enumerable<SpectralClass>
    notIn?: Enumerable<SpectralClass>
    not?: NestedEnumSpectralClassFilter | SpectralClass
  }

  export type NestedEnumGeneratorTechFilter = {
    equals?: GeneratorTech
    in?: Enumerable<GeneratorTech>
    notIn?: Enumerable<GeneratorTech>
    not?: NestedEnumGeneratorTechFilter | GeneratorTech
  }

  export type NestedEnumReactorTechFilter = {
    equals?: ReactorTech
    in?: Enumerable<ReactorTech>
    notIn?: Enumerable<ReactorTech>
    not?: NestedEnumReactorTechFilter | ReactorTech
  }

  export type NestedEnumSpectralClassWithAggregatesFilter = {
    equals?: SpectralClass
    in?: Enumerable<SpectralClass>
    notIn?: Enumerable<SpectralClass>
    not?: NestedEnumSpectralClassWithAggregatesFilter | SpectralClass
    _count?: NestedIntFilter
    _min?: NestedEnumSpectralClassFilter
    _max?: NestedEnumSpectralClassFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedEnumGeneratorTechWithAggregatesFilter = {
    equals?: GeneratorTech
    in?: Enumerable<GeneratorTech>
    notIn?: Enumerable<GeneratorTech>
    not?: NestedEnumGeneratorTechWithAggregatesFilter | GeneratorTech
    _count?: NestedIntFilter
    _min?: NestedEnumGeneratorTechFilter
    _max?: NestedEnumGeneratorTechFilter
  }

  export type NestedEnumReactorTechWithAggregatesFilter = {
    equals?: ReactorTech
    in?: Enumerable<ReactorTech>
    notIn?: Enumerable<ReactorTech>
    not?: NestedEnumReactorTechWithAggregatesFilter | ReactorTech
    _count?: NestedIntFilter
    _min?: NestedEnumReactorTechFilter
    _max?: NestedEnumReactorTechFilter
  }

  export type NestedEnumFuelTypeFilter = {
    equals?: FuelType
    in?: Enumerable<FuelType>
    notIn?: Enumerable<FuelType>
    not?: NestedEnumFuelTypeFilter | FuelType
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumFuelTypeWithAggregatesFilter = {
    equals?: FuelType
    in?: Enumerable<FuelType>
    notIn?: Enumerable<FuelType>
    not?: NestedEnumFuelTypeWithAggregatesFilter | FuelType
    _count?: NestedIntFilter
    _min?: NestedEnumFuelTypeFilter
    _max?: NestedEnumFuelTypeFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type ReactorCreateWithoutCardFrontInput = {
    name?: string
    mass?: number
    radHard?: number
    spectralClass?: SpectralClass
    thrustModifier?: number
    fuelModifier?: number
    coolingReq?: number
    generatorReq: GeneratorTech
    ReactorReq: ReactorTech
    techs?: ReactorCreatetechsInput | Enumerable<GeneratorTech>
    abilities?: ReactorCreateabilitiesInput | Enumerable<Abilities>
    cardBack?: ReactorPairCreateNestedOneWithoutBackInput
  }

  export type ReactorUncheckedCreateWithoutCardFrontInput = {
    id?: number
    name?: string
    mass?: number
    radHard?: number
    spectralClass?: SpectralClass
    thrustModifier?: number
    fuelModifier?: number
    coolingReq?: number
    generatorReq: GeneratorTech
    ReactorReq: ReactorTech
    techs?: ReactorCreatetechsInput | Enumerable<GeneratorTech>
    abilities?: ReactorCreateabilitiesInput | Enumerable<Abilities>
    cardBack?: ReactorPairUncheckedCreateNestedOneWithoutBackInput
  }

  export type ReactorCreateOrConnectWithoutCardFrontInput = {
    where: ReactorWhereUniqueInput
    create: XOR<ReactorCreateWithoutCardFrontInput, ReactorUncheckedCreateWithoutCardFrontInput>
  }

  export type ReactorCreateWithoutCardBackInput = {
    name?: string
    mass?: number
    radHard?: number
    spectralClass?: SpectralClass
    thrustModifier?: number
    fuelModifier?: number
    coolingReq?: number
    generatorReq: GeneratorTech
    ReactorReq: ReactorTech
    techs?: ReactorCreatetechsInput | Enumerable<GeneratorTech>
    abilities?: ReactorCreateabilitiesInput | Enumerable<Abilities>
    cardFront?: ReactorPairCreateNestedOneWithoutFrontInput
  }

  export type ReactorUncheckedCreateWithoutCardBackInput = {
    id?: number
    name?: string
    mass?: number
    radHard?: number
    spectralClass?: SpectralClass
    thrustModifier?: number
    fuelModifier?: number
    coolingReq?: number
    generatorReq: GeneratorTech
    ReactorReq: ReactorTech
    techs?: ReactorCreatetechsInput | Enumerable<GeneratorTech>
    abilities?: ReactorCreateabilitiesInput | Enumerable<Abilities>
    cardFront?: ReactorPairUncheckedCreateNestedOneWithoutFrontInput
  }

  export type ReactorCreateOrConnectWithoutCardBackInput = {
    where: ReactorWhereUniqueInput
    create: XOR<ReactorCreateWithoutCardBackInput, ReactorUncheckedCreateWithoutCardBackInput>
  }

  export type ReactorUpsertWithoutCardFrontInput = {
    update: XOR<ReactorUpdateWithoutCardFrontInput, ReactorUncheckedUpdateWithoutCardFrontInput>
    create: XOR<ReactorCreateWithoutCardFrontInput, ReactorUncheckedCreateWithoutCardFrontInput>
  }

  export type ReactorUpdateWithoutCardFrontInput = {
    name?: StringFieldUpdateOperationsInput | string
    mass?: IntFieldUpdateOperationsInput | number
    radHard?: IntFieldUpdateOperationsInput | number
    spectralClass?: EnumSpectralClassFieldUpdateOperationsInput | SpectralClass
    thrustModifier?: IntFieldUpdateOperationsInput | number
    fuelModifier?: FloatFieldUpdateOperationsInput | number
    coolingReq?: IntFieldUpdateOperationsInput | number
    generatorReq?: EnumGeneratorTechFieldUpdateOperationsInput | GeneratorTech
    ReactorReq?: EnumReactorTechFieldUpdateOperationsInput | ReactorTech
    techs?: ReactorUpdatetechsInput | Enumerable<GeneratorTech>
    abilities?: ReactorUpdateabilitiesInput | Enumerable<Abilities>
    cardBack?: ReactorPairUpdateOneWithoutBackInput
  }

  export type ReactorUncheckedUpdateWithoutCardFrontInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mass?: IntFieldUpdateOperationsInput | number
    radHard?: IntFieldUpdateOperationsInput | number
    spectralClass?: EnumSpectralClassFieldUpdateOperationsInput | SpectralClass
    thrustModifier?: IntFieldUpdateOperationsInput | number
    fuelModifier?: FloatFieldUpdateOperationsInput | number
    coolingReq?: IntFieldUpdateOperationsInput | number
    generatorReq?: EnumGeneratorTechFieldUpdateOperationsInput | GeneratorTech
    ReactorReq?: EnumReactorTechFieldUpdateOperationsInput | ReactorTech
    techs?: ReactorUpdatetechsInput | Enumerable<GeneratorTech>
    abilities?: ReactorUpdateabilitiesInput | Enumerable<Abilities>
    cardBack?: ReactorPairUncheckedUpdateOneWithoutBackInput
  }

  export type ReactorUpsertWithoutCardBackInput = {
    update: XOR<ReactorUpdateWithoutCardBackInput, ReactorUncheckedUpdateWithoutCardBackInput>
    create: XOR<ReactorCreateWithoutCardBackInput, ReactorUncheckedCreateWithoutCardBackInput>
  }

  export type ReactorUpdateWithoutCardBackInput = {
    name?: StringFieldUpdateOperationsInput | string
    mass?: IntFieldUpdateOperationsInput | number
    radHard?: IntFieldUpdateOperationsInput | number
    spectralClass?: EnumSpectralClassFieldUpdateOperationsInput | SpectralClass
    thrustModifier?: IntFieldUpdateOperationsInput | number
    fuelModifier?: FloatFieldUpdateOperationsInput | number
    coolingReq?: IntFieldUpdateOperationsInput | number
    generatorReq?: EnumGeneratorTechFieldUpdateOperationsInput | GeneratorTech
    ReactorReq?: EnumReactorTechFieldUpdateOperationsInput | ReactorTech
    techs?: ReactorUpdatetechsInput | Enumerable<GeneratorTech>
    abilities?: ReactorUpdateabilitiesInput | Enumerable<Abilities>
    cardFront?: ReactorPairUpdateOneWithoutFrontInput
  }

  export type ReactorUncheckedUpdateWithoutCardBackInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mass?: IntFieldUpdateOperationsInput | number
    radHard?: IntFieldUpdateOperationsInput | number
    spectralClass?: EnumSpectralClassFieldUpdateOperationsInput | SpectralClass
    thrustModifier?: IntFieldUpdateOperationsInput | number
    fuelModifier?: FloatFieldUpdateOperationsInput | number
    coolingReq?: IntFieldUpdateOperationsInput | number
    generatorReq?: EnumGeneratorTechFieldUpdateOperationsInput | GeneratorTech
    ReactorReq?: EnumReactorTechFieldUpdateOperationsInput | ReactorTech
    techs?: ReactorUpdatetechsInput | Enumerable<GeneratorTech>
    abilities?: ReactorUpdateabilitiesInput | Enumerable<Abilities>
    cardFront?: ReactorPairUncheckedUpdateOneWithoutFrontInput
  }

  export type ReactorPairCreateWithoutFrontInput = {
    back: ReactorCreateNestedOneWithoutCardBackInput
  }

  export type ReactorPairUncheckedCreateWithoutFrontInput = {
    id?: number
    backId: number
  }

  export type ReactorPairCreateOrConnectWithoutFrontInput = {
    where: ReactorPairWhereUniqueInput
    create: XOR<ReactorPairCreateWithoutFrontInput, ReactorPairUncheckedCreateWithoutFrontInput>
  }

  export type ReactorPairCreateWithoutBackInput = {
    front: ReactorCreateNestedOneWithoutCardFrontInput
  }

  export type ReactorPairUncheckedCreateWithoutBackInput = {
    id?: number
    frontId: number
  }

  export type ReactorPairCreateOrConnectWithoutBackInput = {
    where: ReactorPairWhereUniqueInput
    create: XOR<ReactorPairCreateWithoutBackInput, ReactorPairUncheckedCreateWithoutBackInput>
  }

  export type ReactorPairUpsertWithoutFrontInput = {
    update: XOR<ReactorPairUpdateWithoutFrontInput, ReactorPairUncheckedUpdateWithoutFrontInput>
    create: XOR<ReactorPairCreateWithoutFrontInput, ReactorPairUncheckedCreateWithoutFrontInput>
  }

  export type ReactorPairUpdateWithoutFrontInput = {
    back?: ReactorUpdateOneRequiredWithoutCardBackInput
  }

  export type ReactorPairUncheckedUpdateWithoutFrontInput = {
    id?: IntFieldUpdateOperationsInput | number
    backId?: IntFieldUpdateOperationsInput | number
  }

  export type ReactorPairUpsertWithoutBackInput = {
    update: XOR<ReactorPairUpdateWithoutBackInput, ReactorPairUncheckedUpdateWithoutBackInput>
    create: XOR<ReactorPairCreateWithoutBackInput, ReactorPairUncheckedCreateWithoutBackInput>
  }

  export type ReactorPairUpdateWithoutBackInput = {
    front?: ReactorUpdateOneRequiredWithoutCardFrontInput
  }

  export type ReactorPairUncheckedUpdateWithoutBackInput = {
    id?: IntFieldUpdateOperationsInput | number
    frontId?: IntFieldUpdateOperationsInput | number
  }

  export type GeneratorCreateWithoutCardFrontInput = {
    name?: string
    mass?: number
    radHard?: number
    spectralClass?: SpectralClass
    thrustModifier?: number
    fuelModifier?: number
    coolingReq?: number
    techs?: GeneratorCreatetechsInput | Enumerable<GeneratorTech>
    abilities?: GeneratorCreateabilitiesInput | Enumerable<Abilities>
    generatorReq?: GeneratorCreategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: GeneratorCreateReactorReqInput | Enumerable<ReactorTech>
    cardBack?: GeneratorPairCreateNestedOneWithoutBackInput
  }

  export type GeneratorUncheckedCreateWithoutCardFrontInput = {
    id?: number
    name?: string
    mass?: number
    radHard?: number
    spectralClass?: SpectralClass
    thrustModifier?: number
    fuelModifier?: number
    coolingReq?: number
    techs?: GeneratorCreatetechsInput | Enumerable<GeneratorTech>
    abilities?: GeneratorCreateabilitiesInput | Enumerable<Abilities>
    generatorReq?: GeneratorCreategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: GeneratorCreateReactorReqInput | Enumerable<ReactorTech>
    cardBack?: GeneratorPairUncheckedCreateNestedOneWithoutBackInput
  }

  export type GeneratorCreateOrConnectWithoutCardFrontInput = {
    where: GeneratorWhereUniqueInput
    create: XOR<GeneratorCreateWithoutCardFrontInput, GeneratorUncheckedCreateWithoutCardFrontInput>
  }

  export type GeneratorCreateWithoutCardBackInput = {
    name?: string
    mass?: number
    radHard?: number
    spectralClass?: SpectralClass
    thrustModifier?: number
    fuelModifier?: number
    coolingReq?: number
    techs?: GeneratorCreatetechsInput | Enumerable<GeneratorTech>
    abilities?: GeneratorCreateabilitiesInput | Enumerable<Abilities>
    generatorReq?: GeneratorCreategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: GeneratorCreateReactorReqInput | Enumerable<ReactorTech>
    cardFront?: GeneratorPairCreateNestedOneWithoutFrontInput
  }

  export type GeneratorUncheckedCreateWithoutCardBackInput = {
    id?: number
    name?: string
    mass?: number
    radHard?: number
    spectralClass?: SpectralClass
    thrustModifier?: number
    fuelModifier?: number
    coolingReq?: number
    techs?: GeneratorCreatetechsInput | Enumerable<GeneratorTech>
    abilities?: GeneratorCreateabilitiesInput | Enumerable<Abilities>
    generatorReq?: GeneratorCreategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: GeneratorCreateReactorReqInput | Enumerable<ReactorTech>
    cardFront?: GeneratorPairUncheckedCreateNestedOneWithoutFrontInput
  }

  export type GeneratorCreateOrConnectWithoutCardBackInput = {
    where: GeneratorWhereUniqueInput
    create: XOR<GeneratorCreateWithoutCardBackInput, GeneratorUncheckedCreateWithoutCardBackInput>
  }

  export type GeneratorUpsertWithoutCardFrontInput = {
    update: XOR<GeneratorUpdateWithoutCardFrontInput, GeneratorUncheckedUpdateWithoutCardFrontInput>
    create: XOR<GeneratorCreateWithoutCardFrontInput, GeneratorUncheckedCreateWithoutCardFrontInput>
  }

  export type GeneratorUpdateWithoutCardFrontInput = {
    name?: StringFieldUpdateOperationsInput | string
    mass?: IntFieldUpdateOperationsInput | number
    radHard?: IntFieldUpdateOperationsInput | number
    spectralClass?: EnumSpectralClassFieldUpdateOperationsInput | SpectralClass
    thrustModifier?: IntFieldUpdateOperationsInput | number
    fuelModifier?: FloatFieldUpdateOperationsInput | number
    coolingReq?: IntFieldUpdateOperationsInput | number
    techs?: GeneratorUpdatetechsInput | Enumerable<GeneratorTech>
    abilities?: GeneratorUpdateabilitiesInput | Enumerable<Abilities>
    generatorReq?: GeneratorUpdategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: GeneratorUpdateReactorReqInput | Enumerable<ReactorTech>
    cardBack?: GeneratorPairUpdateOneWithoutBackInput
  }

  export type GeneratorUncheckedUpdateWithoutCardFrontInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mass?: IntFieldUpdateOperationsInput | number
    radHard?: IntFieldUpdateOperationsInput | number
    spectralClass?: EnumSpectralClassFieldUpdateOperationsInput | SpectralClass
    thrustModifier?: IntFieldUpdateOperationsInput | number
    fuelModifier?: FloatFieldUpdateOperationsInput | number
    coolingReq?: IntFieldUpdateOperationsInput | number
    techs?: GeneratorUpdatetechsInput | Enumerable<GeneratorTech>
    abilities?: GeneratorUpdateabilitiesInput | Enumerable<Abilities>
    generatorReq?: GeneratorUpdategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: GeneratorUpdateReactorReqInput | Enumerable<ReactorTech>
    cardBack?: GeneratorPairUncheckedUpdateOneWithoutBackInput
  }

  export type GeneratorUpsertWithoutCardBackInput = {
    update: XOR<GeneratorUpdateWithoutCardBackInput, GeneratorUncheckedUpdateWithoutCardBackInput>
    create: XOR<GeneratorCreateWithoutCardBackInput, GeneratorUncheckedCreateWithoutCardBackInput>
  }

  export type GeneratorUpdateWithoutCardBackInput = {
    name?: StringFieldUpdateOperationsInput | string
    mass?: IntFieldUpdateOperationsInput | number
    radHard?: IntFieldUpdateOperationsInput | number
    spectralClass?: EnumSpectralClassFieldUpdateOperationsInput | SpectralClass
    thrustModifier?: IntFieldUpdateOperationsInput | number
    fuelModifier?: FloatFieldUpdateOperationsInput | number
    coolingReq?: IntFieldUpdateOperationsInput | number
    techs?: GeneratorUpdatetechsInput | Enumerable<GeneratorTech>
    abilities?: GeneratorUpdateabilitiesInput | Enumerable<Abilities>
    generatorReq?: GeneratorUpdategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: GeneratorUpdateReactorReqInput | Enumerable<ReactorTech>
    cardFront?: GeneratorPairUpdateOneWithoutFrontInput
  }

  export type GeneratorUncheckedUpdateWithoutCardBackInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mass?: IntFieldUpdateOperationsInput | number
    radHard?: IntFieldUpdateOperationsInput | number
    spectralClass?: EnumSpectralClassFieldUpdateOperationsInput | SpectralClass
    thrustModifier?: IntFieldUpdateOperationsInput | number
    fuelModifier?: FloatFieldUpdateOperationsInput | number
    coolingReq?: IntFieldUpdateOperationsInput | number
    techs?: GeneratorUpdatetechsInput | Enumerable<GeneratorTech>
    abilities?: GeneratorUpdateabilitiesInput | Enumerable<Abilities>
    generatorReq?: GeneratorUpdategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: GeneratorUpdateReactorReqInput | Enumerable<ReactorTech>
    cardFront?: GeneratorPairUncheckedUpdateOneWithoutFrontInput
  }

  export type GeneratorPairCreateWithoutFrontInput = {
    back: GeneratorCreateNestedOneWithoutCardBackInput
  }

  export type GeneratorPairUncheckedCreateWithoutFrontInput = {
    id?: number
    backId: number
  }

  export type GeneratorPairCreateOrConnectWithoutFrontInput = {
    where: GeneratorPairWhereUniqueInput
    create: XOR<GeneratorPairCreateWithoutFrontInput, GeneratorPairUncheckedCreateWithoutFrontInput>
  }

  export type GeneratorPairCreateWithoutBackInput = {
    front: GeneratorCreateNestedOneWithoutCardFrontInput
  }

  export type GeneratorPairUncheckedCreateWithoutBackInput = {
    id?: number
    frontId: number
  }

  export type GeneratorPairCreateOrConnectWithoutBackInput = {
    where: GeneratorPairWhereUniqueInput
    create: XOR<GeneratorPairCreateWithoutBackInput, GeneratorPairUncheckedCreateWithoutBackInput>
  }

  export type GeneratorPairUpsertWithoutFrontInput = {
    update: XOR<GeneratorPairUpdateWithoutFrontInput, GeneratorPairUncheckedUpdateWithoutFrontInput>
    create: XOR<GeneratorPairCreateWithoutFrontInput, GeneratorPairUncheckedCreateWithoutFrontInput>
  }

  export type GeneratorPairUpdateWithoutFrontInput = {
    back?: GeneratorUpdateOneRequiredWithoutCardBackInput
  }

  export type GeneratorPairUncheckedUpdateWithoutFrontInput = {
    id?: IntFieldUpdateOperationsInput | number
    backId?: IntFieldUpdateOperationsInput | number
  }

  export type GeneratorPairUpsertWithoutBackInput = {
    update: XOR<GeneratorPairUpdateWithoutBackInput, GeneratorPairUncheckedUpdateWithoutBackInput>
    create: XOR<GeneratorPairCreateWithoutBackInput, GeneratorPairUncheckedCreateWithoutBackInput>
  }

  export type GeneratorPairUpdateWithoutBackInput = {
    front?: GeneratorUpdateOneRequiredWithoutCardFrontInput
  }

  export type GeneratorPairUncheckedUpdateWithoutBackInput = {
    id?: IntFieldUpdateOperationsInput | number
    frontId?: IntFieldUpdateOperationsInput | number
  }

  export type ThrusterCreateWithoutCardFrontInput = {
    name?: string
    mass?: number
    radHard?: number
    spectralClass?: SpectralClass
    fuelType?: FuelType
    thrust?: number
    fuelConsumption?: number
    afterBurn?: number
    powersatBonus?: number | null
    coolingReq?: number
    abilities?: ThrusterCreateabilitiesInput | Enumerable<Abilities>
    generatorReq?: ThrusterCreategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: ThrusterCreateReactorReqInput | Enumerable<ReactorTech>
    cardBack?: ThrusterPairCreateNestedOneWithoutBackInput
  }

  export type ThrusterUncheckedCreateWithoutCardFrontInput = {
    id?: number
    name?: string
    mass?: number
    radHard?: number
    spectralClass?: SpectralClass
    fuelType?: FuelType
    thrust?: number
    fuelConsumption?: number
    afterBurn?: number
    powersatBonus?: number | null
    coolingReq?: number
    abilities?: ThrusterCreateabilitiesInput | Enumerable<Abilities>
    generatorReq?: ThrusterCreategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: ThrusterCreateReactorReqInput | Enumerable<ReactorTech>
    cardBack?: ThrusterPairUncheckedCreateNestedOneWithoutBackInput
  }

  export type ThrusterCreateOrConnectWithoutCardFrontInput = {
    where: ThrusterWhereUniqueInput
    create: XOR<ThrusterCreateWithoutCardFrontInput, ThrusterUncheckedCreateWithoutCardFrontInput>
  }

  export type ThrusterCreateWithoutCardBackInput = {
    name?: string
    mass?: number
    radHard?: number
    spectralClass?: SpectralClass
    fuelType?: FuelType
    thrust?: number
    fuelConsumption?: number
    afterBurn?: number
    powersatBonus?: number | null
    coolingReq?: number
    abilities?: ThrusterCreateabilitiesInput | Enumerable<Abilities>
    generatorReq?: ThrusterCreategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: ThrusterCreateReactorReqInput | Enumerable<ReactorTech>
    cardFront?: ThrusterPairCreateNestedOneWithoutFrontInput
  }

  export type ThrusterUncheckedCreateWithoutCardBackInput = {
    id?: number
    name?: string
    mass?: number
    radHard?: number
    spectralClass?: SpectralClass
    fuelType?: FuelType
    thrust?: number
    fuelConsumption?: number
    afterBurn?: number
    powersatBonus?: number | null
    coolingReq?: number
    abilities?: ThrusterCreateabilitiesInput | Enumerable<Abilities>
    generatorReq?: ThrusterCreategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: ThrusterCreateReactorReqInput | Enumerable<ReactorTech>
    cardFront?: ThrusterPairUncheckedCreateNestedOneWithoutFrontInput
  }

  export type ThrusterCreateOrConnectWithoutCardBackInput = {
    where: ThrusterWhereUniqueInput
    create: XOR<ThrusterCreateWithoutCardBackInput, ThrusterUncheckedCreateWithoutCardBackInput>
  }

  export type ThrusterUpsertWithoutCardFrontInput = {
    update: XOR<ThrusterUpdateWithoutCardFrontInput, ThrusterUncheckedUpdateWithoutCardFrontInput>
    create: XOR<ThrusterCreateWithoutCardFrontInput, ThrusterUncheckedCreateWithoutCardFrontInput>
  }

  export type ThrusterUpdateWithoutCardFrontInput = {
    name?: StringFieldUpdateOperationsInput | string
    mass?: IntFieldUpdateOperationsInput | number
    radHard?: IntFieldUpdateOperationsInput | number
    spectralClass?: EnumSpectralClassFieldUpdateOperationsInput | SpectralClass
    fuelType?: EnumFuelTypeFieldUpdateOperationsInput | FuelType
    thrust?: IntFieldUpdateOperationsInput | number
    fuelConsumption?: FloatFieldUpdateOperationsInput | number
    afterBurn?: IntFieldUpdateOperationsInput | number
    powersatBonus?: NullableIntFieldUpdateOperationsInput | number | null
    coolingReq?: IntFieldUpdateOperationsInput | number
    abilities?: ThrusterUpdateabilitiesInput | Enumerable<Abilities>
    generatorReq?: ThrusterUpdategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: ThrusterUpdateReactorReqInput | Enumerable<ReactorTech>
    cardBack?: ThrusterPairUpdateOneWithoutBackInput
  }

  export type ThrusterUncheckedUpdateWithoutCardFrontInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mass?: IntFieldUpdateOperationsInput | number
    radHard?: IntFieldUpdateOperationsInput | number
    spectralClass?: EnumSpectralClassFieldUpdateOperationsInput | SpectralClass
    fuelType?: EnumFuelTypeFieldUpdateOperationsInput | FuelType
    thrust?: IntFieldUpdateOperationsInput | number
    fuelConsumption?: FloatFieldUpdateOperationsInput | number
    afterBurn?: IntFieldUpdateOperationsInput | number
    powersatBonus?: NullableIntFieldUpdateOperationsInput | number | null
    coolingReq?: IntFieldUpdateOperationsInput | number
    abilities?: ThrusterUpdateabilitiesInput | Enumerable<Abilities>
    generatorReq?: ThrusterUpdategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: ThrusterUpdateReactorReqInput | Enumerable<ReactorTech>
    cardBack?: ThrusterPairUncheckedUpdateOneWithoutBackInput
  }

  export type ThrusterUpsertWithoutCardBackInput = {
    update: XOR<ThrusterUpdateWithoutCardBackInput, ThrusterUncheckedUpdateWithoutCardBackInput>
    create: XOR<ThrusterCreateWithoutCardBackInput, ThrusterUncheckedCreateWithoutCardBackInput>
  }

  export type ThrusterUpdateWithoutCardBackInput = {
    name?: StringFieldUpdateOperationsInput | string
    mass?: IntFieldUpdateOperationsInput | number
    radHard?: IntFieldUpdateOperationsInput | number
    spectralClass?: EnumSpectralClassFieldUpdateOperationsInput | SpectralClass
    fuelType?: EnumFuelTypeFieldUpdateOperationsInput | FuelType
    thrust?: IntFieldUpdateOperationsInput | number
    fuelConsumption?: FloatFieldUpdateOperationsInput | number
    afterBurn?: IntFieldUpdateOperationsInput | number
    powersatBonus?: NullableIntFieldUpdateOperationsInput | number | null
    coolingReq?: IntFieldUpdateOperationsInput | number
    abilities?: ThrusterUpdateabilitiesInput | Enumerable<Abilities>
    generatorReq?: ThrusterUpdategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: ThrusterUpdateReactorReqInput | Enumerable<ReactorTech>
    cardFront?: ThrusterPairUpdateOneWithoutFrontInput
  }

  export type ThrusterUncheckedUpdateWithoutCardBackInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mass?: IntFieldUpdateOperationsInput | number
    radHard?: IntFieldUpdateOperationsInput | number
    spectralClass?: EnumSpectralClassFieldUpdateOperationsInput | SpectralClass
    fuelType?: EnumFuelTypeFieldUpdateOperationsInput | FuelType
    thrust?: IntFieldUpdateOperationsInput | number
    fuelConsumption?: FloatFieldUpdateOperationsInput | number
    afterBurn?: IntFieldUpdateOperationsInput | number
    powersatBonus?: NullableIntFieldUpdateOperationsInput | number | null
    coolingReq?: IntFieldUpdateOperationsInput | number
    abilities?: ThrusterUpdateabilitiesInput | Enumerable<Abilities>
    generatorReq?: ThrusterUpdategeneratorReqInput | Enumerable<GeneratorTech>
    ReactorReq?: ThrusterUpdateReactorReqInput | Enumerable<ReactorTech>
    cardFront?: ThrusterPairUncheckedUpdateOneWithoutFrontInput
  }

  export type ThrusterPairCreateWithoutFrontInput = {
    back: ThrusterCreateNestedOneWithoutCardBackInput
  }

  export type ThrusterPairUncheckedCreateWithoutFrontInput = {
    id?: number
    backId: number
  }

  export type ThrusterPairCreateOrConnectWithoutFrontInput = {
    where: ThrusterPairWhereUniqueInput
    create: XOR<ThrusterPairCreateWithoutFrontInput, ThrusterPairUncheckedCreateWithoutFrontInput>
  }

  export type ThrusterPairCreateWithoutBackInput = {
    front: ThrusterCreateNestedOneWithoutCardFrontInput
  }

  export type ThrusterPairUncheckedCreateWithoutBackInput = {
    id?: number
    frontId: number
  }

  export type ThrusterPairCreateOrConnectWithoutBackInput = {
    where: ThrusterPairWhereUniqueInput
    create: XOR<ThrusterPairCreateWithoutBackInput, ThrusterPairUncheckedCreateWithoutBackInput>
  }

  export type ThrusterPairUpsertWithoutFrontInput = {
    update: XOR<ThrusterPairUpdateWithoutFrontInput, ThrusterPairUncheckedUpdateWithoutFrontInput>
    create: XOR<ThrusterPairCreateWithoutFrontInput, ThrusterPairUncheckedCreateWithoutFrontInput>
  }

  export type ThrusterPairUpdateWithoutFrontInput = {
    back?: ThrusterUpdateOneRequiredWithoutCardBackInput
  }

  export type ThrusterPairUncheckedUpdateWithoutFrontInput = {
    id?: IntFieldUpdateOperationsInput | number
    backId?: IntFieldUpdateOperationsInput | number
  }

  export type ThrusterPairUpsertWithoutBackInput = {
    update: XOR<ThrusterPairUpdateWithoutBackInput, ThrusterPairUncheckedUpdateWithoutBackInput>
    create: XOR<ThrusterPairCreateWithoutBackInput, ThrusterPairUncheckedCreateWithoutBackInput>
  }

  export type ThrusterPairUpdateWithoutBackInput = {
    front?: ThrusterUpdateOneRequiredWithoutCardFrontInput
  }

  export type ThrusterPairUncheckedUpdateWithoutBackInput = {
    id?: IntFieldUpdateOperationsInput | number
    frontId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}